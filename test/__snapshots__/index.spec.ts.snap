// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`arrayFunc rules array-func/avoid-reverse fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 27,
    "endColumn": 43,
    "endLine": 4,
    "fix": Object {
      "range": Array [
        128,
        144,
      ],
      "text": "reduceRight",
    },
    "line": 4,
    "message": "Prefer using reduceRight over reversing the array and reduce",
    "nodeType": "Identifier",
    "ruleId": "array-func/avoid-reverse",
    "severity": 2,
  },
  Object {
    "column": 54,
    "endColumn": 59,
    "endLine": 4,
    "line": 4,
    "message": "Operands of '+' operation must either be both strings or both numbers.",
    "messageId": "notNumbers",
    "nodeType": "BinaryExpression",
    "ruleId": "@typescript-eslint/restrict-plus-operands",
    "severity": 2,
  },
  Object {
    "column": 27,
    "endColumn": 48,
    "endLine": 6,
    "fix": Object {
      "range": Array [
        193,
        214,
      ],
      "text": "reduce",
    },
    "line": 6,
    "message": "Prefer using reduce over reversing the array and reduceRight",
    "nodeType": "Identifier",
    "ruleId": "array-func/avoid-reverse",
    "severity": 2,
  },
  Object {
    "column": 59,
    "endColumn": 64,
    "endLine": 6,
    "line": 6,
    "message": "Operands of '+' operation must either be both strings or both numbers.",
    "messageId": "notNumbers",
    "nodeType": "BinaryExpression",
    "ruleId": "@typescript-eslint/restrict-plus-operands",
    "severity": 2,
  },
]
`;

exports[`arrayFunc rules array-func/from-map fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 1,
    "endColumn": 25,
    "endLine": 5,
    "fix": Object {
      "range": Array [
        156,
        162,
      ],
      "text": ", ",
    },
    "line": 5,
    "message": "Use mapFn callback of Array.from instead of map()",
    "nodeType": "Identifier",
    "ruleId": "array-func/from-map",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 35,
    "endLine": 7,
    "fix": Object {
      "range": Array [
        195,
        223,
      ],
      "text": "(id) => ((id) => id[0])(((t) => t)(id)))",
    },
    "line": 7,
    "message": "Use mapFn callback of Array.from instead of map()",
    "nodeType": "Identifier",
    "ruleId": "array-func/from-map",
    "severity": 2,
  },
]
`;

exports[`arrayFunc rules array-func/prefer-array-from fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 25,
    "endColumn": 38,
    "endLine": 1,
    "fix": Object {
      "range": Array [
        24,
        37,
      ],
      "text": "Array.from('string')",
    },
    "line": 1,
    "message": "Use Array.from to convert from iterable to array",
    "nodeType": "ArrayExpression",
    "ruleId": "array-func/prefer-array-from",
    "severity": 2,
  },
  Object {
    "column": 19,
    "endColumn": 32,
    "endLine": 3,
    "fix": Object {
      "range": Array [
        58,
        71,
      ],
      "text": "Array.from(iterable)",
    },
    "line": 3,
    "message": "Use Array.from to convert from iterable to array",
    "nodeType": "ArrayExpression",
    "ruleId": "array-func/prefer-array-from",
    "severity": 2,
  },
]
`;

exports[`eslint rules capitalized-comments fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 1,
    "endColumn": 21,
    "endLine": 1,
    "fix": Object {
      "range": Array [
        3,
        4,
      ],
      "text": "L",
    },
    "line": 1,
    "message": "Comments should not begin with a lowercase character.",
    "messageId": "unexpectedLowercaseComment",
    "nodeType": null,
    "ruleId": "capitalized-comments",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 22,
    "endLine": 3,
    "fix": Object {
      "range": Array [
        25,
        26,
      ],
      "text": "C",
    },
    "line": 3,
    "message": "Comments should not begin with a lowercase character.",
    "messageId": "unexpectedLowercaseComment",
    "nodeType": null,
    "ruleId": "capitalized-comments",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 20,
    "endLine": 5,
    "fix": Object {
      "range": Array [
        48,
        49,
      ],
      "text": "C",
    },
    "line": 5,
    "message": "Comments should not begin with a lowercase character.",
    "messageId": "unexpectedLowercaseComment",
    "nodeType": null,
    "ruleId": "capitalized-comments",
    "severity": 2,
  },
]
`;

exports[`eslint rules func-names fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 23,
    "endColumn": 46,
    "endLine": 3,
    "line": 3,
    "message": "Unexpected named generator function 'funcNamesFail'.",
    "messageId": "named",
    "nodeType": "FunctionExpression",
    "ruleId": "func-names",
    "severity": 2,
  },
]
`;

exports[`eslint rules id-length fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 7,
    "endColumn": 8,
    "endLine": 6,
    "line": 6,
    "message": "Identifier name 'z' is too short (< 2).",
    "messageId": "tooShort",
    "nodeType": "Identifier",
    "ruleId": "id-length",
    "severity": 2,
  },
  Object {
    "column": 23,
    "endColumn": 24,
    "endLine": 8,
    "line": 8,
    "message": "Identifier name 'e' is too short (< 2).",
    "messageId": "tooShort",
    "nodeType": "Identifier",
    "ruleId": "id-length",
    "severity": 2,
  },
  Object {
    "column": 10,
    "endColumn": 20,
    "endLine": 12,
    "line": 12,
    "message": "Identifier name 'e' is too short (< 2).",
    "messageId": "tooShort",
    "nodeType": "Identifier",
    "ruleId": "id-length",
    "severity": 2,
  },
  Object {
    "column": 17,
    "endColumn": 18,
    "endLine": 16,
    "line": 16,
    "message": "Identifier name 'a' is too short (< 2).",
    "messageId": "tooShort",
    "nodeType": "Identifier",
    "ruleId": "id-length",
    "severity": 2,
  },
  Object {
    "column": 2,
    "endColumn": 3,
    "endLine": 18,
    "line": 18,
    "message": "Identifier name 'a' is too short (< 2).",
    "messageId": "tooShort",
    "nodeType": "Identifier",
    "ruleId": "id-length",
    "severity": 2,
  },
  Object {
    "column": 9,
    "endColumn": 10,
    "endLine": 22,
    "line": 22,
    "message": "Identifier name 'y' is too short (< 2).",
    "messageId": "tooShort",
    "nodeType": "Identifier",
    "ruleId": "id-length",
    "severity": 2,
  },
  Object {
    "column": 12,
    "endColumn": 13,
    "endLine": 23,
    "line": 23,
    "message": "Identifier name 'a' is too short (< 2).",
    "messageId": "tooShort",
    "nodeType": "Identifier",
    "ruleId": "id-length",
    "severity": 2,
  },
  Object {
    "column": 7,
    "endColumn": 8,
    "endLine": 25,
    "line": 25,
    "message": "Identifier name 'x' is too short (< 2).",
    "messageId": "tooShort",
    "nodeType": "Identifier",
    "ruleId": "id-length",
    "severity": 2,
  },
]
`;

exports[`eslint rules max-statements fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 32,
    "endColumn": 2,
    "endLine": 89,
    "line": 3,
    "message": "Arrow function has too many statements (83). Maximum allowed is 15.",
    "messageId": "exceed",
    "nodeType": "ArrowFunctionExpression",
    "ruleId": "max-statements",
    "severity": 2,
  },
]
`;

exports[`eslint rules one-var fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 3,
    "endColumn": 17,
    "endLine": 6,
    "fix": Object {
      "range": Array [
        167,
        173,
      ],
      "text": ";
    const ",
    },
    "line": 5,
    "message": "Split 'const' declarations into multiple statements.",
    "messageId": "split",
    "nodeType": "VariableDeclaration",
    "ruleId": "one-var",
    "severity": 2,
  },
]
`;

exports[`eslint rules padding-line-between-statements fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 3,
    "endColumn": 4,
    "endLine": 13,
    "fix": Object {
      "range": Array [
        311,
        311,
      ],
      "text": "
",
    },
    "line": 12,
    "message": "Expected blank line before this statement.",
    "messageId": "expectedBlankLine",
    "nodeType": "IfStatement",
    "ruleId": "padding-line-between-statements",
    "severity": 2,
  },
  Object {
    "column": 3,
    "endColumn": 9,
    "endLine": 14,
    "fix": Object {
      "range": Array [
        350,
        350,
      ],
      "text": "
",
    },
    "line": 14,
    "message": "Expected blank line before this statement.",
    "messageId": "expectedBlankLine",
    "nodeType": "ExpressionStatement",
    "ruleId": "padding-line-between-statements",
    "severity": 2,
  },
  Object {
    "column": 3,
    "endColumn": 10,
    "endLine": 16,
    "fix": Object {
      "range": Array [
        359,
        359,
      ],
      "text": "
",
    },
    "line": 16,
    "message": "Expected blank line before this statement.",
    "messageId": "expectedBlankLine",
    "nodeType": "ReturnStatement",
    "ruleId": "padding-line-between-statements",
    "severity": 2,
  },
]
`;

exports[`eslintComments rules eslint-comments/disable-enable-pair fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 19,
    "endColumn": 29,
    "endLine": 7,
    "line": 7,
    "message": "Requires 'eslint-enable' directive for 'no-bitwise'.",
    "nodeType": null,
    "ruleId": "eslint-comments/disable-enable-pair",
    "severity": 2,
  },
]
`;

exports[`eslintComments rules eslint-comments/no-duplicate-disable fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 19,
    "endColumn": 28,
    "endLine": 1,
    "line": 1,
    "message": "'id-length' rule is disabled but never reported.",
    "nodeType": null,
    "ruleId": "eslint-comments/no-unused-disable",
    "severity": 2,
    "suggestions": Array [
      Object {
        "desc": "Remove \`eslint-disable\` comment.",
        "fix": Object {
          "range": Array [
            0,
            30,
          ],
          "text": "",
        },
      },
    ],
  },
  Object {
    "column": 19,
    "endColumn": 28,
    "endLine": 2,
    "line": 2,
    "message": "'id-length' rule has been disabled already.",
    "nodeType": null,
    "ruleId": "eslint-comments/no-duplicate-disable",
    "severity": 2,
  },
]
`;

exports[`eslintComments rules eslint-comments/no-unlimited-disable fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 0,
    "endColumn": 21,
    "endLine": 1,
    "line": 1,
    "message": "Unexpected unlimited 'eslint-disable' comment. Specify some rule names to disable.",
    "nodeType": null,
    "ruleId": "eslint-comments/no-unlimited-disable",
    "severity": 2,
  },
]
`;

exports[`eslintComments rules eslint-comments/no-unused-disable fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 19,
    "endColumn": 29,
    "endLine": 1,
    "line": 1,
    "message": "'no-bitwise' rule is disabled but never reported.",
    "nodeType": null,
    "ruleId": "eslint-comments/no-unused-disable",
    "severity": 2,
    "suggestions": Array [
      Object {
        "desc": "Remove \`eslint-disable\` comment.",
        "fix": Object {
          "range": Array [
            0,
            31,
          ],
          "text": "",
        },
      },
    ],
  },
]
`;

exports[`eslintComments rules eslint-comments/no-unused-enable fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 1,
    "endColumn": 74,
    "endLine": 2,
    "line": 2,
    "message": "Definition for rule '@typescript-eslint/explicit-function-return-type-init' was not found.",
    "nodeType": null,
    "ruleId": "@typescript-eslint/explicit-function-return-type-init",
    "severity": 2,
  },
  Object {
    "column": 18,
    "endColumn": 71,
    "endLine": 2,
    "line": 2,
    "message": "'@typescript-eslint/explicit-function-return-type-init' rule is re-enabled but it has not been disabled.",
    "nodeType": null,
    "ruleId": "eslint-comments/no-unused-enable",
    "severity": 2,
  },
]
`;

exports[`eslintComments rules eslint-comments/no-use fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 0,
    "endColumn": 196,
    "endLine": 1,
    "line": 1,
    "message": "Unexpected ESLint directive comment.",
    "nodeType": null,
    "ruleId": "eslint-comments/no-use",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 196,
    "endLine": 1,
    "line": 1,
    "message": "This line has a comment length of 195. Maximum allowed is 80.",
    "messageId": "maxComment",
    "nodeType": "Program",
    "ruleId": "max-len",
    "severity": 2,
  },
  Object {
    "column": 1,
    "fatal": true,
    "line": 1,
    "message": "Failed to parse JSON from ' \\"no-undef\\": off / / eslint-env browser / / eslint-disable foo / / eslint-enable bar / // eslint-disable-line // eslint-disable-next-line / exported foo / / global $ / / globals a, b, c': Unexpected token o in JSON at position 14",
    "ruleId": null,
    "severity": 2,
  },
]
`;

exports[`immutable rules immutable/no-let fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 1,
    "endColumn": 19,
    "endLine": 1,
    "line": 1,
    "message": "Unexpected let, use const.",
    "nodeType": "VariableDeclaration",
    "ruleId": "immutable/no-let",
    "severity": 2,
  },
  Object {
    "column": 5,
    "endColumn": 14,
    "endLine": 1,
    "fix": Object {
      "range": Array [
        0,
        18,
      ],
      "text": "const noLetFail = 0;",
    },
    "line": 1,
    "message": "'noLetFail' is never reassigned. Use 'const' instead.",
    "messageId": "useConst",
    "nodeType": "Identifier",
    "ruleId": "prefer-const",
    "severity": 2,
  },
]
`;

exports[`immutable rules immutable/no-mutation fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 1,
    "endColumn": 24,
    "endLine": 3,
    "line": 3,
    "message": "No object mutation allowed.",
    "nodeType": "AssignmentExpression",
    "ruleId": "immutable/no-mutation",
    "severity": 2,
  },
]
`;

exports[`immutable rules immutable/no-this fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 3,
    "endColumn": 13,
    "endLine": 5,
    "line": 5,
    "message": "No object mutation allowed.",
    "nodeType": "AssignmentExpression",
    "ruleId": "immutable/no-mutation",
    "severity": 2,
  },
  Object {
    "column": 3,
    "endColumn": 7,
    "endLine": 5,
    "line": 5,
    "message": "Unexpected this, use functions not classes.",
    "nodeType": "ThisExpression",
    "ruleId": "immutable/no-this",
    "severity": 2,
  },
  Object {
    "column": 3,
    "endColumn": 7,
    "endLine": 5,
    "line": 5,
    "message": "Unexpected 'this'.",
    "messageId": "unexpectedThis",
    "nodeType": "ThisExpression",
    "ruleId": "@typescript-eslint/no-invalid-this",
    "severity": 2,
  },
  Object {
    "column": 8,
    "endColumn": 9,
    "endLine": 5,
    "line": 5,
    "message": "Identifier name 'x' is too short (< 2).",
    "messageId": "tooShort",
    "nodeType": "Identifier",
    "ruleId": "id-length",
    "severity": 2,
  },
]
`;

exports[`import rules import/no-default-export fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 1,
    "endColumn": 20,
    "endLine": 1,
    "line": 1,
    "message": "Prefer named exports.",
    "nodeType": "ExportDefaultDeclaration",
    "ruleId": "import/no-default-export",
    "severity": 2,
  },
]
`;

exports[`jest rules jest/consistent-test-it fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 1,
    "endColumn": 5,
    "endLine": 4,
    "fix": Object {
      "range": Array [
        83,
        87,
      ],
      "text": "it",
    },
    "line": 4,
    "message": "Prefer using 'it' instead of 'test'",
    "messageId": "consistentMethod",
    "nodeType": "Identifier",
    "ruleId": "jest/consistent-test-it",
    "severity": 2,
  },
]
`;

exports[`jest rules jest/no-interpolation-in-snapshots fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 37,
    "endColumn": 47,
    "endLine": 4,
    "line": 4,
    "message": "Do not use string interpolation inside of snapshots",
    "messageId": "noInterpolation",
    "nodeType": "TemplateLiteral",
    "ruleId": "jest/no-interpolation-in-snapshots",
    "severity": 2,
  },
]
`;

exports[`jest rules jest/prefer-expect-assertions fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 1,
    "endColumn": 3,
    "endLine": 3,
    "line": 1,
    "message": "Every test should have either \`expect.assertions(<number of assertions>)\` or \`expect.hasAssertions()\` as its first expression",
    "messageId": "haveExpectAssertions",
    "nodeType": "CallExpression",
    "ruleId": "jest/prefer-expect-assertions",
    "severity": 2,
    "suggestions": Array [
      Object {
        "desc": "Add \`expect.hasAssertions()\`",
        "fix": Object {
          "range": Array [
            37,
            37,
          ],
          "text": "expect.hasAssertions();",
        },
        "messageId": "suggestAddingHasAssertions",
      },
      Object {
        "desc": "Add \`expect.assertions(<number of assertions>)\`",
        "fix": Object {
          "range": Array [
            37,
            37,
          ],
          "text": "expect.assertions();",
        },
        "messageId": "suggestAddingAssertions",
      },
    ],
  },
]
`;

exports[`jest rules jest/unbound-method fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 15,
    "endColumn": 27,
    "endLine": 12,
    "line": 12,
    "message": "Avoid referencing unbound methods which may cause unintentional scoping of \`this\`.",
    "messageId": "unbound",
    "nodeType": "MemberExpression",
    "ruleId": "jest/unbound-method",
    "severity": 2,
  },
]
`;

exports[`jest rules jest/valid-title fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 4,
    "endColumn": 21,
    "endLine": 1,
    "line": 1,
    "message": "\\"should\\" is not allowed in test titles.",
    "messageId": "disallowedWord",
    "nodeType": "Literal",
    "ruleId": "jest/valid-title",
    "severity": 2,
  },
]
`;

exports[`overrides rules max-len fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 1,
    "endColumn": 83,
    "endLine": 3,
    "line": 3,
    "message": "This line has a comment length of 82. Maximum allowed is 80.",
    "messageId": "maxComment",
    "nodeType": "Program",
    "ruleId": "max-len",
    "severity": 2,
  },
]
`;

exports[`ridedott rules @ridedott/no-single-line-comment-block fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 1,
    "endColumn": 4,
    "endLine": 3,
    "fix": Object {
      "range": Array [
        0,
        37,
      ],
      "text": "// Only one line in this block",
    },
    "line": 1,
    "message": "Use line comment notation instead.",
    "messageId": "useSingleLineNotation",
    "nodeType": null,
    "ruleId": "@ridedott/no-single-line-comment-block",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 48,
    "endLine": 5,
    "fix": Object {
      "range": Array [
        39,
        86,
      ],
      "text": "// Only one line in this block (single line)",
    },
    "line": 5,
    "message": "Use line comment notation instead.",
    "messageId": "useSingleLineNotation",
    "nodeType": null,
    "ruleId": "@ridedott/no-single-line-comment-block",
    "severity": 2,
  },
]
`;

exports[`ridedott rules @ridedott/no-template-literals-without-expression fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 1,
    "endColumn": 51,
    "endLine": 2,
    "fix": Object {
      "range": Array [
        62,
        112,
      ],
      "text": "'Single line template literal without expressions'",
    },
    "line": 2,
    "message": "Template literals should contain an expression.",
    "messageId": "templateLiteralsShouldHaveExpression",
    "nodeType": null,
    "ruleId": "@ridedott/no-template-literals-without-expression",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 72,
    "endLine": 4,
    "fix": Object {
      "range": Array [
        115,
        186,
      ],
      "text": "\\"Single line template literal without expressions with 'single quotes'\\"",
    },
    "line": 4,
    "message": "Template literals should contain an expression.",
    "messageId": "templateLiteralsShouldHaveExpression",
    "nodeType": null,
    "ruleId": "@ridedott/no-template-literals-without-expression",
    "severity": 2,
  },
]
`;

exports[`simpleImportSort rules simple-import-sort/exports fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 1,
    "endColumn": 27,
    "endLine": 2,
    "fix": Object {
      "range": Array [
        0,
        52,
      ],
      "text": "export * as b from 'path';
export * as a from 'url';",
    },
    "line": 1,
    "message": "Run autofix to sort these exports!",
    "messageId": "sort",
    "nodeType": null,
    "ruleId": "simple-import-sort/exports",
    "severity": 2,
  },
]
`;

exports[`simpleImportSort rules simple-import-sort/imports fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 1,
    "endColumn": 34,
    "endLine": 2,
    "fix": Object {
      "range": Array [
        0,
        63,
      ],
      "text": "import * as assert from 'assert';
import * as path from 'path';",
    },
    "line": 1,
    "message": "Run autofix to sort these imports!",
    "messageId": "sort",
    "nodeType": null,
    "ruleId": "simple-import-sort/imports",
    "severity": 2,
  },
]
`;

exports[`typescriptEslint rules @typescript-eslint/array-type fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 44,
    "endColumn": 49,
    "endLine": 5,
    "line": 5,
    "message": "Missing return type on function.",
    "messageId": "missingReturnType",
    "nodeType": "ArrowFunctionExpression",
    "ruleId": "@typescript-eslint/explicit-function-return-type",
    "severity": 2,
  },
]
`;

exports[`typescriptEslint rules @typescript-eslint/ban-types fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 15,
    "endColumn": 21,
    "endLine": 1,
    "fix": Object {
      "range": Array [
        14,
        20,
      ],
      "text": "object",
    },
    "line": 1,
    "message": "Don't use \`Object\` as a type. Use object instead.",
    "messageId": "bannedTypeMessage",
    "nodeType": "Identifier",
    "ruleId": "@typescript-eslint/ban-types",
    "severity": 2,
  },
]
`;

exports[`typescriptEslint rules @typescript-eslint/consistent-type-definitions fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 6,
    "endColumn": 35,
    "endLine": 1,
    "fix": Object {
      "range": Array [
        0,
        51,
      ],
      "text": "interface ConsistentTypeDefinitionsFail { x: number }",
    },
    "line": 1,
    "message": "Use an \`interface\` instead of a \`type\`.",
    "messageId": "interfaceOverType",
    "nodeType": "Identifier",
    "ruleId": "@typescript-eslint/consistent-type-definitions",
    "severity": 2,
  },
]
`;

exports[`typescriptEslint rules @typescript-eslint/explicit-function-return-type fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 23,
    "endColumn": 28,
    "endLine": 3,
    "line": 3,
    "message": "Missing return type on function.",
    "messageId": "missingReturnType",
    "nodeType": "ArrowFunctionExpression",
    "ruleId": "@typescript-eslint/explicit-function-return-type",
    "severity": 2,
  },
  Object {
    "column": 28,
    "endColumn": 39,
    "endLine": 5,
    "line": 5,
    "message": "Missing return type on function.",
    "messageId": "missingReturnType",
    "nodeType": "FunctionExpression",
    "ruleId": "@typescript-eslint/explicit-function-return-type",
    "severity": 2,
  },
  Object {
    "column": 8,
    "endColumn": 13,
    "endLine": 10,
    "line": 10,
    "message": "Missing return type on function.",
    "messageId": "missingReturnType",
    "nodeType": "ArrowFunctionExpression",
    "ruleId": "@typescript-eslint/explicit-function-return-type",
    "severity": 2,
  },
]
`;

exports[`typescriptEslint rules @typescript-eslint/member-ordering fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 3,
    "endColumn": 16,
    "endLine": 3,
    "line": 3,
    "message": "Member \\"a\\" should be declared before member \\"b\\".",
    "messageId": "incorrectOrder",
    "nodeType": "TSPropertySignature",
    "ruleId": "@typescript-eslint/member-ordering",
    "severity": 2,
  },
]
`;

exports[`typescriptEslint rules @typescript-eslint/naming-convention fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 7,
    "endColumn": 24,
    "endLine": 1,
    "line": 1,
    "message": "Variable name \`my_favorite_color\` must match one of the following formats: camelCase, PascalCase, UPPER_CASE",
    "messageId": "doesNotMatchFormat",
    "nodeType": "Identifier",
    "ruleId": "@typescript-eslint/naming-convention",
    "severity": 2,
  },
  Object {
    "column": 11,
    "endColumn": 18,
    "endLine": 3,
    "line": 3,
    "message": "Interface name \`IPrefix\` must not match the RegExp: /^I[A-Z][a-z].+/u",
    "messageId": "satisfyCustom",
    "nodeType": "Identifier",
    "ruleId": "@typescript-eslint/naming-convention",
    "severity": 2,
  },
  Object {
    "column": 11,
    "endColumn": 24,
    "endLine": 7,
    "line": 7,
    "message": "Interface name \`camelCaseFail\` must match one of the following formats: PascalCase",
    "messageId": "doesNotMatchFormat",
    "nodeType": "Identifier",
    "ruleId": "@typescript-eslint/naming-convention",
    "severity": 2,
  },
  Object {
    "column": 25,
    "endColumn": 30,
    "endLine": 7,
    "line": 7,
    "message": "Type Parameter name \`t_foo\` must match the RegExp: /[A-Z][a-zA-Z]+/u",
    "messageId": "satisfyCustom",
    "nodeType": "Identifier",
    "ruleId": "@typescript-eslint/naming-convention",
    "severity": 2,
  },
  Object {
    "column": 15,
    "endColumn": 16,
    "endLine": 11,
    "line": 11,
    "message": "Type Parameter name \`T\` must match the RegExp: /[A-Z][a-zA-Z]+/u",
    "messageId": "satisfyCustom",
    "nodeType": "Identifier",
    "ruleId": "@typescript-eslint/naming-convention",
    "severity": 2,
  },
  Object {
    "column": 21,
    "endColumn": 22,
    "endLine": 15,
    "line": 15,
    "message": "Type Parameter name \`T\` must match the RegExp: /[A-Z][a-zA-Z]+/u",
    "messageId": "satisfyCustom",
    "nodeType": "Identifier",
    "ruleId": "@typescript-eslint/naming-convention",
    "severity": 2,
  },
  Object {
    "column": 22,
    "endColumn": 35,
    "endLine": 19,
    "line": 19,
    "message": "Parameter name \`_fail\` must not have a leading underscore.",
    "messageId": "unexpectedUnderscore",
    "nodeType": "Identifier",
    "ruleId": "@typescript-eslint/naming-convention",
    "severity": 2,
  },
  Object {
    "column": 3,
    "endColumn": 8,
    "endLine": 24,
    "line": 24,
    "message": "Type Property name \`_fail\` must not have a leading underscore.",
    "messageId": "unexpectedUnderscore",
    "nodeType": "Identifier",
    "ruleId": "@typescript-eslint/naming-convention",
    "severity": 2,
  },
]
`;

exports[`typescriptEslint rules @typescript-eslint/no-dynamic-delete fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 22,
    "endColumn": 27,
    "endLine": 3,
    "fix": Object {
      "range": Array [
        118,
        125,
      ],
      "text": ".aaa",
    },
    "line": 3,
    "message": "Do not delete dynamically computed property keys.",
    "messageId": "dynamicDelete",
    "nodeType": "Literal",
    "ruleId": "@typescript-eslint/no-dynamic-delete",
    "severity": 2,
  },
  Object {
    "column": 22,
    "endColumn": 27,
    "endLine": 3,
    "fix": Object {
      "range": Array [
        118,
        125,
      ],
      "text": ".aaa",
    },
    "line": 3,
    "message": "[\\"aaa\\"] is better written in dot notation.",
    "messageId": "useDot",
    "nodeType": "Literal",
    "ruleId": "@typescript-eslint/dot-notation",
    "severity": 2,
  },
  Object {
    "column": 22,
    "endColumn": 32,
    "endLine": 4,
    "fix": Object {
      "range": Array [
        147,
        159,
      ],
      "text": ".Infinity",
    },
    "line": 4,
    "message": "Do not delete dynamically computed property keys.",
    "messageId": "dynamicDelete",
    "nodeType": "Literal",
    "ruleId": "@typescript-eslint/no-dynamic-delete",
    "severity": 2,
  },
  Object {
    "column": 22,
    "endColumn": 32,
    "endLine": 4,
    "fix": Object {
      "range": Array [
        147,
        159,
      ],
      "text": ".Infinity",
    },
    "line": 4,
    "message": "[\\"Infinity\\"] is better written in dot notation.",
    "messageId": "useDot",
    "nodeType": "Literal",
    "ruleId": "@typescript-eslint/dot-notation",
    "severity": 2,
  },
  Object {
    "column": 22,
    "endColumn": 26,
    "endLine": 8,
    "line": 8,
    "message": "Do not delete dynamically computed property keys.",
    "messageId": "dynamicDelete",
    "nodeType": "Identifier",
    "ruleId": "@typescript-eslint/no-dynamic-delete",
    "severity": 2,
  },
  Object {
    "column": 22,
    "endColumn": 40,
    "endLine": 9,
    "line": 9,
    "message": "Do not delete dynamically computed property keys.",
    "messageId": "dynamicDelete",
    "nodeType": "CallExpression",
    "ruleId": "@typescript-eslint/no-dynamic-delete",
    "severity": 2,
  },
]
`;

exports[`typescriptEslint rules @typescript-eslint/no-explicit-any fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 24,
    "endColumn": 27,
    "endLine": 3,
    "fix": Object {
      "range": Array [
        75,
        78,
      ],
      "text": "unknown",
    },
    "line": 3,
    "message": "Unexpected any. Specify a different type.",
    "messageId": "unexpectedAny",
    "nodeType": "TSAnyKeyword",
    "ruleId": "@typescript-eslint/no-explicit-any",
    "severity": 2,
    "suggestions": Array [
      Object {
        "desc": "Use \`unknown\` instead, this will force you to explicitly, and safely assert the type is correct.",
        "fix": Object {
          "range": Array [
            75,
            78,
          ],
          "text": "unknown",
        },
        "messageId": "suggestUnknown",
      },
      Object {
        "desc": "Use \`never\` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",
        "fix": Object {
          "range": Array [
            75,
            78,
          ],
          "text": "never",
        },
        "messageId": "suggestNever",
      },
    ],
  },
  Object {
    "column": 33,
    "endColumn": 36,
    "endLine": 5,
    "fix": Object {
      "range": Array [
        128,
        131,
      ],
      "text": "unknown",
    },
    "line": 5,
    "message": "Unexpected any. Specify a different type.",
    "messageId": "unexpectedAny",
    "nodeType": "TSAnyKeyword",
    "ruleId": "@typescript-eslint/no-explicit-any",
    "severity": 2,
    "suggestions": Array [
      Object {
        "desc": "Use \`unknown\` instead, this will force you to explicitly, and safely assert the type is correct.",
        "fix": Object {
          "range": Array [
            128,
            131,
          ],
          "text": "unknown",
        },
        "messageId": "suggestUnknown",
      },
      Object {
        "desc": "Use \`never\` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",
        "fix": Object {
          "range": Array [
            128,
            131,
          ],
          "text": "never",
        },
        "messageId": "suggestNever",
      },
    ],
  },
  Object {
    "column": 24,
    "endColumn": 34,
    "endLine": 7,
    "fix": Object {
      "range": Array [
        172,
        182,
      ],
      "text": "any[]",
    },
    "line": 7,
    "message": "Array type using 'Array<any>' is forbidden for simple types. Use 'any[]' instead.",
    "messageId": "errorStringArraySimple",
    "nodeType": "TSTypeReference",
    "ruleId": "@typescript-eslint/array-type",
    "severity": 2,
  },
  Object {
    "column": 30,
    "endColumn": 33,
    "endLine": 7,
    "fix": Object {
      "range": Array [
        178,
        181,
      ],
      "text": "unknown",
    },
    "line": 7,
    "message": "Unexpected any. Specify a different type.",
    "messageId": "unexpectedAny",
    "nodeType": "TSAnyKeyword",
    "ruleId": "@typescript-eslint/no-explicit-any",
    "severity": 2,
    "suggestions": Array [
      Object {
        "desc": "Use \`unknown\` instead, this will force you to explicitly, and safely assert the type is correct.",
        "fix": Object {
          "range": Array [
            178,
            181,
          ],
          "text": "unknown",
        },
        "messageId": "suggestUnknown",
      },
      Object {
        "desc": "Use \`never\` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",
        "fix": Object {
          "range": Array [
            178,
            181,
          ],
          "text": "never",
        },
        "messageId": "suggestNever",
      },
    ],
  },
  Object {
    "column": 24,
    "endColumn": 42,
    "endLine": 9,
    "fix": Object {
      "range": Array [
        221,
        239,
      ],
      "text": "readonly any[]",
    },
    "line": 9,
    "message": "Array type using 'Array<any>' is forbidden for simple types. Use 'any[]' instead.",
    "messageId": "errorStringArraySimple",
    "nodeType": "TSTypeReference",
    "ruleId": "@typescript-eslint/array-type",
    "severity": 2,
  },
  Object {
    "column": 38,
    "endColumn": 41,
    "endLine": 9,
    "fix": Object {
      "range": Array [
        235,
        238,
      ],
      "text": "unknown",
    },
    "line": 9,
    "message": "Unexpected any. Specify a different type.",
    "messageId": "unexpectedAny",
    "nodeType": "TSAnyKeyword",
    "ruleId": "@typescript-eslint/no-explicit-any",
    "severity": 2,
    "suggestions": Array [
      Object {
        "desc": "Use \`unknown\` instead, this will force you to explicitly, and safely assert the type is correct.",
        "fix": Object {
          "range": Array [
            235,
            238,
          ],
          "text": "unknown",
        },
        "messageId": "suggestUnknown",
      },
      Object {
        "desc": "Use \`never\` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",
        "fix": Object {
          "range": Array [
            235,
            238,
          ],
          "text": "never",
        },
        "messageId": "suggestNever",
      },
    ],
  },
]
`;

exports[`typescriptEslint rules @typescript-eslint/no-extra-non-null-assertion fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 38,
    "endColumn": 48,
    "endLine": 2,
    "line": 2,
    "message": "Forbidden non-null assertion.",
    "messageId": "noNonNull",
    "nodeType": "TSNonNullExpression",
    "ruleId": "@typescript-eslint/no-non-null-assertion",
    "severity": 2,
    "suggestions": Array [
      Object {
        "desc": "Consider using the optional chain operator \`?.\` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.",
        "fix": Object {
          "range": Array [
            92,
            93,
          ],
          "text": "?",
        },
        "messageId": "suggestOptionalChain",
      },
    ],
  },
  Object {
    "column": 38,
    "endColumn": 47,
    "endLine": 2,
    "line": 2,
    "message": "Forbidden non-null assertion.",
    "messageId": "noNonNull",
    "nodeType": "TSNonNullExpression",
    "ruleId": "@typescript-eslint/no-non-null-assertion",
    "severity": 2,
  },
  Object {
    "column": 38,
    "endColumn": 47,
    "endLine": 2,
    "fix": Object {
      "range": Array [
        91,
        92,
      ],
      "text": "",
    },
    "line": 2,
    "message": "Forbidden extra non-null assertion.",
    "messageId": "noExtraNonNullAssertion",
    "nodeType": "TSNonNullExpression",
    "ruleId": "@typescript-eslint/no-extra-non-null-assertion",
    "severity": 2,
  },
  Object {
    "column": 38,
    "endColumn": 46,
    "endLine": 2,
    "line": 2,
    "message": "Forbidden non-null assertion.",
    "messageId": "noNonNull",
    "nodeType": "TSNonNullExpression",
    "ruleId": "@typescript-eslint/no-non-null-assertion",
    "severity": 2,
  },
  Object {
    "column": 38,
    "endColumn": 46,
    "endLine": 2,
    "fix": Object {
      "range": Array [
        90,
        91,
      ],
      "text": "",
    },
    "line": 2,
    "message": "Forbidden extra non-null assertion.",
    "messageId": "noExtraNonNullAssertion",
    "nodeType": "TSNonNullExpression",
    "ruleId": "@typescript-eslint/no-extra-non-null-assertion",
    "severity": 2,
  },
]
`;

exports[`typescriptEslint rules @typescript-eslint/no-magic-numbers fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 28,
    "endColumn": 29,
    "endLine": 1,
    "line": 1,
    "message": "No magic number: 7.",
    "messageId": "noMagic",
    "nodeType": "Literal",
    "ruleId": "@typescript-eslint/no-magic-numbers",
    "severity": 2,
  },
  Object {
    "column": 32,
    "endColumn": 33,
    "endLine": 1,
    "line": 1,
    "message": "No magic number: 5.",
    "messageId": "noMagic",
    "nodeType": "Literal",
    "ruleId": "@typescript-eslint/no-magic-numbers",
    "severity": 2,
  },
]
`;

exports[`typescriptEslint rules @typescript-eslint/no-unnecessary-condition fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 7,
    "endColumn": 12,
    "endLine": 9,
    "line": 9,
    "message": "Unnecessary conditional, value is always truthy.",
    "messageId": "alwaysTruthy",
    "nodeType": "Identifier",
    "ruleId": "@typescript-eslint/no-unnecessary-condition",
    "severity": 2,
  },
  Object {
    "column": 7,
    "endColumn": 10,
    "endLine": 16,
    "line": 16,
    "message": "Unnecessary conditional, value is always truthy.",
    "messageId": "alwaysTruthy",
    "nodeType": "Identifier",
    "ruleId": "@typescript-eslint/no-unnecessary-condition",
    "severity": 2,
  },
]
`;

exports[`typescriptEslint rules @typescript-eslint/prefer-nullish-coalescing fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 32,
    "endColumn": 38,
    "endLine": 8,
    "line": 8,
    "message": "Unexpected use of '<<'.",
    "messageId": "unexpected",
    "nodeType": "BinaryExpression",
    "ruleId": "no-bitwise",
    "severity": 2,
  },
]
`;

exports[`typescriptEslint rules @typescript-eslint/prefer-optional-chain fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 1,
    "endColumn": 37,
    "endLine": 5,
    "line": 5,
    "message": "Prefer using an optional chain expression instead, as it's more concise and easier to read.",
    "messageId": "preferOptionalChain",
    "nodeType": "LogicalExpression",
    "ruleId": "@typescript-eslint/prefer-optional-chain",
    "severity": 2,
    "suggestions": Array [
      Object {
        "desc": "Change to an optional chain.",
        "fix": Object {
          "range": Array [
            195,
            231,
          ],
          "text": "foo?.a?.b?.c",
        },
        "messageId": "optionalChainSuggest",
      },
    ],
  },
  Object {
    "column": 1,
    "endColumn": 37,
    "endLine": 6,
    "line": 6,
    "message": "Prefer using an optional chain expression instead, as it's more concise and easier to read.",
    "messageId": "preferOptionalChain",
    "nodeType": "LogicalExpression",
    "ruleId": "@typescript-eslint/prefer-optional-chain",
    "severity": 2,
    "suggestions": Array [
      Object {
        "desc": "Change to an optional chain.",
        "fix": Object {
          "range": Array [
            233,
            269,
          ],
          "text": "foo?.a?.b?.c",
        },
        "messageId": "optionalChainSuggest",
      },
    ],
  },
  Object {
    "column": 1,
    "endColumn": 62,
    "endLine": 7,
    "line": 7,
    "message": "Prefer using an optional chain expression instead, as it's more concise and easier to read.",
    "messageId": "preferOptionalChain",
    "nodeType": "LogicalExpression",
    "ruleId": "@typescript-eslint/prefer-optional-chain",
    "severity": 2,
    "suggestions": Array [
      Object {
        "desc": "Change to an optional chain.",
        "fix": Object {
          "range": Array [
            271,
            332,
          ],
          "text": "foo?.a?.b?.method?.()",
        },
        "messageId": "optionalChainSuggest",
      },
    ],
  },
  Object {
    "column": 1,
    "endColumn": 16,
    "endLine": 14,
    "line": 9,
    "message": "Prefer using an optional chain expression instead, as it's more concise and easier to read.",
    "messageId": "preferOptionalChain",
    "nodeType": "LogicalExpression",
    "ruleId": "@typescript-eslint/prefer-optional-chain",
    "severity": 2,
    "suggestions": Array [
      Object {
        "desc": "Change to an optional chain.",
        "fix": Object {
          "range": Array [
            335,
            457,
          ],
          "text": "foo?.a?.b?.c?.d?.e",
        },
        "messageId": "optionalChainSuggest",
      },
    ],
  },
  Object {
    "column": 3,
    "endColumn": 16,
    "endLine": 10,
    "line": 10,
    "message": "Use '===' to compare with null.",
    "messageId": "unexpected",
    "nodeType": "BinaryExpression",
    "ruleId": "no-eq-null",
    "severity": 2,
  },
  Object {
    "column": 9,
    "endColumn": 11,
    "endLine": 10,
    "line": 10,
    "message": "Expected '!==' and instead saw '!='.",
    "messageId": "unexpected",
    "nodeType": "BinaryExpression",
    "ruleId": "eqeqeq",
    "severity": 2,
  },
  Object {
    "column": 13,
    "endColumn": 15,
    "endLine": 12,
    "line": 12,
    "message": "Expected '!==' and instead saw '!='.",
    "messageId": "unexpected",
    "nodeType": "BinaryExpression",
    "ruleId": "eqeqeq",
    "severity": 2,
  },
]
`;

exports[`typescriptEslint rules @typescript-eslint/promise-function-async fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 37,
    "endColumn": 42,
    "endLine": 4,
    "fix": Object {
      "range": Array [
        139,
        139,
      ],
      "text": "async ",
    },
    "line": 4,
    "message": "Functions that return promises must be async.",
    "messageId": "missingAsync",
    "nodeType": "ArrowFunctionExpression",
    "ruleId": "@typescript-eslint/promise-function-async",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 34,
    "endLine": 6,
    "fix": Object {
      "range": Array [
        172,
        172,
      ],
      "text": "async ",
    },
    "line": 6,
    "message": "Functions that return promises must be async.",
    "messageId": "missingAsync",
    "nodeType": "FunctionDeclaration",
    "ruleId": "@typescript-eslint/promise-function-async",
    "severity": 2,
  },
]
`;

exports[`typescriptEslint rules @typescript-eslint/restrict-template-expressions fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 18,
    "endColumn": 19,
    "endLine": 6,
    "line": 6,
    "message": "No magic number: 2.",
    "messageId": "noMagic",
    "nodeType": "Literal",
    "ruleId": "@typescript-eslint/no-magic-numbers",
    "severity": 2,
  },
  Object {
    "column": 24,
    "endColumn": 28,
    "endLine": 7,
    "line": 7,
    "message": "Invalid type \\"number[]\\" of template literal expression.",
    "messageId": "invalidType",
    "nodeType": "Identifier",
    "ruleId": "@typescript-eslint/restrict-template-expressions",
    "severity": 2,
  },
  Object {
    "column": 24,
    "endColumn": 36,
    "endLine": 10,
    "line": 10,
    "message": "Invalid type \\"{ name: string; }\\" of template literal expression.",
    "messageId": "invalidType",
    "nodeType": "LogicalExpression",
    "ruleId": "@typescript-eslint/restrict-template-expressions",
    "severity": 2,
  },
]
`;

exports[`typescriptEslint rules @typescript-eslint/return-await fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 12,
    "endColumn": 34,
    "endLine": 11,
    "fix": Object {
      "range": Array [
        373,
        373,
      ],
      "text": "await ",
    },
    "line": 11,
    "message": "Returning an awaited promise is required in this context.",
    "messageId": "requiredPromiseAwait",
    "nodeType": "CallExpression",
    "ruleId": "@typescript-eslint/return-await",
    "severity": 2,
  },
  Object {
    "column": 10,
    "endColumn": 38,
    "endLine": 16,
    "fix": Object {
      "range": Array [
        473,
        479,
      ],
      "text": "",
    },
    "line": 16,
    "message": "Returning an awaited promise is not allowed in this context.",
    "messageId": "disallowedPromiseAwait",
    "nodeType": "AwaitExpression",
    "ruleId": "@typescript-eslint/return-await",
    "severity": 2,
  },
  Object {
    "column": 10,
    "endColumn": 23,
    "endLine": 20,
    "fix": Object {
      "range": Array [
        553,
        559,
      ],
      "text": "",
    },
    "line": 20,
    "message": "Returning an awaited value that is not a promise is not allowed.",
    "messageId": "nonPromiseAwait",
    "nodeType": "AwaitExpression",
    "ruleId": "@typescript-eslint/return-await",
    "severity": 2,
  },
]
`;

exports[`typescriptEslint rules @typescript-eslint/strict-boolean-expressions fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 5,
    "endColumn": 12,
    "endLine": 3,
    "line": 3,
    "message": "Unexpected string value in conditional. An explicit empty string check is required.",
    "messageId": "conditionErrorString",
    "nodeType": "Identifier",
    "ruleId": "@typescript-eslint/strict-boolean-expressions",
    "severity": 2,
  },
]
`;

exports[`unicorn rules unicorn/better-regex fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 29,
    "endColumn": 36,
    "endLine": 3,
    "fix": Object {
      "range": Array [
        73,
        80,
      ],
      "text": "/\\\\d/",
    },
    "line": 3,
    "message": "/[0-9]/ can be optimized to /\\\\d/.",
    "messageId": "better-regex",
    "nodeType": "Literal",
    "ruleId": "unicorn/better-regex",
    "severity": 2,
  },
  Object {
    "column": 29,
    "endColumn": 37,
    "endLine": 4,
    "fix": Object {
      "range": Array [
        110,
        118,
      ],
      "text": "/\\\\D/",
    },
    "line": 4,
    "message": "/[^0-9]/ can be optimized to /\\\\D/.",
    "messageId": "better-regex",
    "nodeType": "Literal",
    "ruleId": "unicorn/better-regex",
    "severity": 2,
  },
  Object {
    "column": 29,
    "endColumn": 43,
    "endLine": 5,
    "fix": Object {
      "range": Array [
        148,
        162,
      ],
      "text": "/\\\\w/",
    },
    "line": 5,
    "message": "/[a-zA-Z0-9_]/ can be optimized to /\\\\w/.",
    "messageId": "better-regex",
    "nodeType": "Literal",
    "ruleId": "unicorn/better-regex",
    "severity": 2,
  },
  Object {
    "column": 29,
    "endColumn": 41,
    "endLine": 6,
    "fix": Object {
      "range": Array [
        192,
        204,
      ],
      "text": "/\\\\w/i",
    },
    "line": 6,
    "message": "/[a-z0-9_]/i can be optimized to /\\\\w/i.",
    "messageId": "better-regex",
    "nodeType": "Literal",
    "ruleId": "unicorn/better-regex",
    "severity": 2,
  },
  Object {
    "column": 29,
    "endColumn": 44,
    "endLine": 7,
    "fix": Object {
      "range": Array [
        234,
        249,
      ],
      "text": "/\\\\W/",
    },
    "line": 7,
    "message": "/[^a-zA-Z0-9_]/ can be optimized to /\\\\W/.",
    "messageId": "better-regex",
    "nodeType": "Literal",
    "ruleId": "unicorn/better-regex",
    "severity": 2,
  },
  Object {
    "column": 29,
    "endColumn": 42,
    "endLine": 8,
    "fix": Object {
      "range": Array [
        279,
        292,
      ],
      "text": "/\\\\W/i",
    },
    "line": 8,
    "message": "/[^a-z0-9_]/i can be optimized to /\\\\W/i.",
    "messageId": "better-regex",
    "nodeType": "Literal",
    "ruleId": "unicorn/better-regex",
    "severity": 2,
  },
  Object {
    "column": 29,
    "endColumn": 59,
    "endLine": 9,
    "fix": Object {
      "range": Array [
        322,
        352,
      ],
      "text": "/\\\\d\\\\.\\\\w-\\\\D/i",
    },
    "line": 9,
    "message": "/[0-9]\\\\.[a-zA-Z0-9_]\\\\-[^0-9]/i can be optimized to /\\\\d\\\\.\\\\w-\\\\D/i.",
    "messageId": "better-regex",
    "nodeType": "Literal",
    "ruleId": "unicorn/better-regex",
    "severity": 2,
  },
  Object {
    "column": 49,
    "endColumn": 50,
    "endLine": 9,
    "line": 9,
    "message": "Unnecessary escape character: \\\\-.",
    "messageId": "unnecessaryEscape",
    "nodeType": "Literal",
    "ruleId": "no-useless-escape",
    "severity": 2,
    "suggestions": Array [
      Object {
        "desc": "Remove the \`\\\\\`. This maintains the current functionality.",
        "fix": Object {
          "range": Array [
            342,
            343,
          ],
          "text": "",
        },
        "messageId": "removeEscape",
      },
      Object {
        "desc": "Replace the \`\\\\\` with \`\\\\\\\\\` to include the actual backslash character.",
        "fix": Object {
          "range": Array [
            342,
            342,
          ],
          "text": "\\\\",
        },
        "messageId": "escapeBackslash",
      },
    ],
  },
]
`;

exports[`unicorn rules unicorn/catch-error-name fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 10,
    "endColumn": 25,
    "endLine": 7,
    "fix": Object {
      "range": Array [
        148,
        154,
      ],
      "text": "error",
    },
    "line": 7,
    "message": "The catch parameter \`ohNoes\` should be named \`error\`.",
    "messageId": "catch-error-name",
    "nodeType": "Identifier",
    "ruleId": "unicorn/catch-error-name",
    "severity": 2,
  },
]
`;

exports[`unicorn rules unicorn/consistent-destructuring fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 16,
    "endColumn": 47,
    "endLine": 6,
    "line": 6,
    "message": "Use destructured variables over properties.",
    "messageId": "consistentDestructuring",
    "nodeType": "MemberExpression",
    "ruleId": "unicorn/consistent-destructuring",
    "severity": 2,
    "suggestions": Array [
      Object {
        "data": Object {
          "expression": "consistentDestructructingFail.b",
          "property": "b",
        },
        "desc": "Replace \`consistentDestructructingFail.b\` with destructured property \`b\`.",
        "fix": Object {
          "range": Array [
            165,
            247,
          ],
          "text": ", b } = consistentDestructructingFail;
console.log(a, b",
        },
        "messageId": "consistentDestructuringSuggest",
      },
    ],
  },
]
`;

exports[`unicorn rules unicorn/consistent-function-scoping fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 3,
    "endColumn": 17,
    "endLine": 9,
    "line": 9,
    "message": "Move function 'doBar' to the outer scope.",
    "messageId": "consistent-function-scoping",
    "nodeType": "FunctionDeclaration",
    "ruleId": "unicorn/consistent-function-scoping",
    "severity": 2,
  },
  Object {
    "column": 23,
    "endColumn": 25,
    "endLine": 17,
    "line": 17,
    "message": "Move arrow function 'doBar' to the outer scope.",
    "messageId": "consistent-function-scoping",
    "nodeType": "ArrowFunctionExpression",
    "ruleId": "unicorn/consistent-function-scoping",
    "severity": 2,
  },
]
`;

exports[`unicorn rules unicorn/custom-error-definition fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 5,
    "endColumn": 20,
    "endLine": 6,
    "fix": Object {
      "range": Array [
        172,
        201,
      ],
      "text": "",
    },
    "line": 6,
    "message": "Pass the error message to \`super()\` instead of setting \`this.message\`.",
    "nodeType": "ExpressionStatement",
    "ruleId": "unicorn/custom-error-definition",
    "severity": 2,
  },
  Object {
    "column": 17,
    "endColumn": 30,
    "endLine": 9,
    "line": 9,
    "message": "The \`name\` property should be set to \`CustomFailError\`.",
    "nodeType": "Literal",
    "ruleId": "unicorn/custom-error-definition",
    "severity": 2,
  },
]
`;

exports[`unicorn rules unicorn/error-message fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 7,
    "endColumn": 14,
    "endLine": 4,
    "line": 4,
    "message": "Pass a message to the \`Error\` constructor.",
    "messageId": "constructorMissingMessage",
    "nodeType": "CallExpression",
    "ruleId": "unicorn/error-message",
    "severity": 2,
  },
]
`;

exports[`unicorn rules unicorn/escape-case fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 25,
    "endColumn": 31,
    "endLine": 3,
    "fix": Object {
      "range": Array [
        68,
        74,
      ],
      "text": "'\\\\xA9'",
    },
    "line": 3,
    "message": "Use uppercase characters for the value of the escape sequence.",
    "messageId": "escape-case",
    "nodeType": "Literal",
    "ruleId": "unicorn/escape-case",
    "severity": 2,
  },
  Object {
    "column": 25,
    "endColumn": 33,
    "endLine": 4,
    "fix": Object {
      "range": Array [
        100,
        108,
      ],
      "text": "'\\\\uD834'",
    },
    "line": 4,
    "message": "Use uppercase characters for the value of the escape sequence.",
    "messageId": "escape-case",
    "nodeType": "Literal",
    "ruleId": "unicorn/escape-case",
    "severity": 2,
  },
  Object {
    "column": 25,
    "endColumn": 36,
    "endLine": 5,
    "fix": Object {
      "range": Array [
        134,
        145,
      ],
      "text": "'\\\\u{1D306}'",
    },
    "line": 5,
    "message": "Use uppercase characters for the value of the escape sequence.",
    "messageId": "escape-case",
    "nodeType": "Literal",
    "ruleId": "unicorn/escape-case",
    "severity": 2,
  },
]
`;

exports[`unicorn rules unicorn/expiring-todo-comments fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 1,
    "endColumn": 47,
    "endLine": 1,
    "line": 1,
    "message": "There is a TODO that is past due date: 2000-01-01. I'll fix this next week.",
    "messageId": "unicorn/expiredTodo",
    "nodeType": null,
    "ruleId": "unicorn/expiring-todo-comments",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 61,
    "endLine": 2,
    "fix": Object {
      "range": Array [
        0,
        107,
      ],
      "text": "/*
 * TODO [2000-01-01]: I'll fix this next week.
 * TODO [2000-01-01, 2001-01-01]: Multiple dates won't work.
 */",
    },
    "line": 1,
    "message": "Expected a block comment instead of consecutive line comments.",
    "messageId": "expectedBlock",
    "nodeType": null,
    "ruleId": "multiline-comment-style",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 61,
    "endLine": 2,
    "line": 2,
    "message": "Avoid using multiple expiration dates in TODO: 2000-01-01, 2001-01-01. Multiple dates won't work.",
    "messageId": "unicorn/avoidMultipleDates",
    "nodeType": null,
    "ruleId": "unicorn/expiring-todo-comments",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 51,
    "endLine": 4,
    "line": 4,
    "message": "There is a TODO that is past due package version: >1. If your package.json version is > 1.",
    "messageId": "unicorn/reachedPackageVersion",
    "nodeType": null,
    "ruleId": "unicorn/expiring-todo-comments",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 56,
    "endLine": 6,
    "fix": Object {
      "range": Array [
        109,
        268,
      ],
      "text": "/*
 * TODO [>1]: If your package.json version is > 1.
 * TODO [>=1]: If your package.json version is >= 1.
 * TODO [>1, >2]: Multiple package versions won't work.
 */",
    },
    "line": 4,
    "message": "Expected a block comment instead of consecutive line comments.",
    "messageId": "expectedBlock",
    "nodeType": null,
    "ruleId": "multiline-comment-style",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 53,
    "endLine": 5,
    "line": 5,
    "message": "There is a TODO that is past due package version: >=1. If your package.json version is >= 1.",
    "messageId": "unicorn/reachedPackageVersion",
    "nodeType": null,
    "ruleId": "unicorn/expiring-todo-comments",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 56,
    "endLine": 6,
    "line": 6,
    "message": "Avoid using multiple package versions in TODO: >1, >2. Multiple package versions won't work.",
    "messageId": "unicorn/avoidMultiplePackageVersions",
    "nodeType": null,
    "ruleId": "unicorn/expiring-todo-comments",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 77,
    "endLine": 9,
    "fix": Object {
      "range": Array [
        270,
        415,
      ],
      "text": "/*
 * TODO [+already-have-pkg]: Since we already have it, this reports.
 * TODO [-we-dont-have-this-package]: Since we don't have, trigger a report.
 */",
    },
    "line": 8,
    "message": "Expected a block comment instead of consecutive line comments.",
    "messageId": "expectedBlock",
    "nodeType": null,
    "ruleId": "multiline-comment-style",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 77,
    "endLine": 9,
    "line": 9,
    "message": "There is a TODO that is deprecated since you uninstalled: we-dont-have-this-package. Since we don't have, trigger a report.",
    "messageId": "unicorn/dontHavePackage",
    "nodeType": null,
    "ruleId": "unicorn/expiring-todo-comments",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 23,
    "endLine": 11,
    "line": 11,
    "message": "Unexpected 'todo' comment: 'TODO: Add unicorns.'.",
    "messageId": "unexpectedComment",
    "nodeType": "Line",
    "ruleId": "unicorn/expiring-todo-comments",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 4,
    "endLine": 17,
    "line": 13,
    "message": "There is a TODO that is past due date: 2002-12-25. Yet",
    "messageId": "unicorn/expiredTodo",
    "nodeType": null,
    "ruleId": "unicorn/expiring-todo-comments",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 4,
    "endLine": 17,
    "line": 13,
    "message": "There is a TODO that is past due date: 2002-12-25. Another",
    "messageId": "unicorn/expiredTodo",
    "nodeType": null,
    "ruleId": "unicorn/expiring-todo-comments",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 4,
    "endLine": 17,
    "line": 13,
    "message": "There is a TODO that is past due date: 2002-12-25. Way",
    "messageId": "unicorn/expiredTodo",
    "nodeType": null,
    "ruleId": "unicorn/expiring-todo-comments",
    "severity": 2,
  },
]
`;

exports[`unicorn rules unicorn/explicit-length-check fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 5,
    "endColumn": 20,
    "endLine": 4,
    "fix": Object {
      "range": Array [
        102,
        117,
      ],
      "text": "'string'.length > 0",
    },
    "line": 4,
    "message": "Use \`.length > 0\` when checking length is not zero.",
    "messageId": "non-zero",
    "nodeType": "MemberExpression",
    "ruleId": "unicorn/explicit-length-check",
    "severity": 2,
  },
  Object {
    "column": 5,
    "endColumn": 14,
    "endLine": 7,
    "fix": Object {
      "range": Array [
        128,
        137,
      ],
      "text": "[].length > 0",
    },
    "line": 7,
    "message": "Use \`.length > 0\` when checking length is not zero.",
    "messageId": "non-zero",
    "nodeType": "MemberExpression",
    "ruleId": "unicorn/explicit-length-check",
    "severity": 2,
  },
  Object {
    "column": 5,
    "endColumn": 15,
    "endLine": 10,
    "fix": Object {
      "range": Array [
        148,
        158,
      ],
      "text": "[].length === 0",
    },
    "line": 10,
    "message": "Use \`.length === 0\` when checking length is zero.",
    "messageId": "zero",
    "nodeType": "UnaryExpression",
    "ruleId": "unicorn/explicit-length-check",
    "severity": 2,
  },
  Object {
    "column": 5,
    "endColumn": 27,
    "endLine": 13,
    "fix": Object {
      "range": Array [
        169,
        191,
      ],
      "text": "[1, 2, 3].length > 0",
    },
    "line": 13,
    "message": "Use \`.length > 0\` when checking length is not zero.",
    "messageId": "non-zero",
    "nodeType": "BinaryExpression",
    "ruleId": "unicorn/explicit-length-check",
    "severity": 2,
  },
  Object {
    "column": 9,
    "endColumn": 10,
    "endLine": 13,
    "line": 13,
    "message": "No magic number: 2.",
    "messageId": "noMagic",
    "nodeType": "Literal",
    "ruleId": "@typescript-eslint/no-magic-numbers",
    "severity": 2,
  },
  Object {
    "column": 12,
    "endColumn": 13,
    "endLine": 13,
    "line": 13,
    "message": "No magic number: 3.",
    "messageId": "noMagic",
    "nodeType": "Literal",
    "ruleId": "@typescript-eslint/no-magic-numbers",
    "severity": 2,
  },
]
`;

exports[`unicorn rules unicorn/filename-case fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 18,
    "endColumn": 39,
    "endLine": 1,
    "line": 1,
    "message": "'unicorn/filename-case' rule is re-enabled but it has not been disabled.",
    "nodeType": null,
    "ruleId": "eslint-comments/no-unused-enable",
    "severity": 2,
  },
]
`;

exports[`unicorn rules unicorn/import-index fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 1,
    "endColumn": 37,
    "endLine": 1,
    "fix": Object {
      "range": Array [
        26,
        35,
      ],
      "text": "'.'",
    },
    "line": 1,
    "message": "Do not reference the index file directly..",
    "messageId": "import-index",
    "nodeType": "ImportDeclaration",
    "ruleId": "unicorn/import-index",
    "severity": 2,
  },
]
`;

exports[`unicorn rules unicorn/new-for-builtins fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 28,
    "endColumn": 33,
    "endLine": 1,
    "fix": Object {
      "range": Array [
        27,
        27,
      ],
      "text": "new ",
    },
    "line": 1,
    "message": "Use \`new Set()\` instead of \`Set()\`.",
    "messageId": "enforce",
    "nodeType": "CallExpression",
    "ruleId": "unicorn/new-for-builtins",
    "severity": 2,
  },
  Object {
    "column": 28,
    "endColumn": 31,
    "endLine": 1,
    "line": 1,
    "message": "A function with a name starting with an uppercase letter should only be used as a constructor.",
    "messageId": "upper",
    "nodeType": "CallExpression",
    "ruleId": "new-cap",
    "severity": 2,
  },
]
`;

exports[`unicorn rules unicorn/no-array-for-each fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 4,
    "endColumn": 11,
    "endLine": 4,
    "fix": Object {
      "range": Array [
        103,
        156,
      ],
      "text": "for (const element of []) {
  console.log(element);
}",
    },
    "line": 4,
    "message": "Do not use \`Array#forEach(…)\`.",
    "messageId": "no-array-for-each",
    "nodeType": "Identifier",
    "ruleId": "unicorn/no-array-for-each",
    "severity": 2,
  },
]
`;

exports[`unicorn rules unicorn/no-array-push-push fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 21,
    "endColumn": 25,
    "endLine": 4,
    "fix": Object {
      "range": Array [
        69,
        100,
      ],
      "text": ", 0);",
    },
    "line": 4,
    "message": "Do not call \`Array#push()\` multiple times.",
    "messageId": "error",
    "nodeType": "Identifier",
    "ruleId": "unicorn/no-array-push-push",
    "severity": 2,
  },
]
`;

exports[`unicorn rules unicorn/no-console-spaces fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 17,
    "endColumn": 18,
    "endLine": 3,
    "fix": Object {
      "range": Array [
        49,
        50,
      ],
      "text": "",
    },
    "line": 3,
    "message": "Do not use trailing space between \`console.log\` parameters.",
    "messageId": "no-console-spaces",
    "nodeType": null,
    "ruleId": "unicorn/no-console-spaces",
    "severity": 2,
  },
  Object {
    "column": 21,
    "endColumn": 22,
    "endLine": 4,
    "fix": Object {
      "range": Array [
        81,
        82,
      ],
      "text": "",
    },
    "line": 4,
    "message": "Do not use leading space between \`console.log\` parameters.",
    "messageId": "no-console-spaces",
    "nodeType": null,
    "ruleId": "unicorn/no-console-spaces",
    "severity": 2,
  },
  Object {
    "column": 17,
    "endColumn": 18,
    "endLine": 6,
    "fix": Object {
      "range": Array [
        106,
        107,
      ],
      "text": "",
    },
    "line": 6,
    "message": "Do not use trailing space between \`console.log\` parameters.",
    "messageId": "no-console-spaces",
    "nodeType": null,
    "ruleId": "unicorn/no-console-spaces",
    "severity": 2,
  },
  Object {
    "column": 22,
    "endColumn": 23,
    "endLine": 6,
    "fix": Object {
      "range": Array [
        111,
        112,
      ],
      "text": "",
    },
    "line": 6,
    "message": "Do not use leading space between \`console.log\` parameters.",
    "messageId": "no-console-spaces",
    "nodeType": null,
    "ruleId": "unicorn/no-console-spaces",
    "severity": 2,
  },
  Object {
    "column": 17,
    "endColumn": 18,
    "endLine": 7,
    "fix": Object {
      "range": Array [
        135,
        136,
      ],
      "text": "",
    },
    "line": 7,
    "message": "Do not use trailing space between \`console.log\` parameters.",
    "messageId": "no-console-spaces",
    "nodeType": null,
    "ruleId": "unicorn/no-console-spaces",
    "severity": 2,
  },
  Object {
    "column": 22,
    "endColumn": 23,
    "endLine": 7,
    "fix": Object {
      "range": Array [
        140,
        141,
      ],
      "text": "",
    },
    "line": 7,
    "message": "Do not use leading space between \`console.log\` parameters.",
    "messageId": "no-console-spaces",
    "nodeType": null,
    "ruleId": "unicorn/no-console-spaces",
    "severity": 2,
  },
  Object {
    "column": 19,
    "endColumn": 20,
    "endLine": 9,
    "fix": Object {
      "range": Array [
        167,
        168,
      ],
      "text": "",
    },
    "line": 9,
    "message": "Do not use trailing space between \`console.debug\` parameters.",
    "messageId": "no-console-spaces",
    "nodeType": null,
    "ruleId": "unicorn/no-console-spaces",
    "severity": 2,
  },
  Object {
    "column": 18,
    "endColumn": 19,
    "endLine": 10,
    "fix": Object {
      "range": Array [
        196,
        197,
      ],
      "text": "",
    },
    "line": 10,
    "message": "Do not use trailing space between \`console.info\` parameters.",
    "messageId": "no-console-spaces",
    "nodeType": null,
    "ruleId": "unicorn/no-console-spaces",
    "severity": 2,
  },
  Object {
    "column": 18,
    "endColumn": 19,
    "endLine": 11,
    "fix": Object {
      "range": Array [
        225,
        226,
      ],
      "text": "",
    },
    "line": 11,
    "message": "Do not use trailing space between \`console.warn\` parameters.",
    "messageId": "no-console-spaces",
    "nodeType": null,
    "ruleId": "unicorn/no-console-spaces",
    "severity": 2,
  },
  Object {
    "column": 19,
    "endColumn": 20,
    "endLine": 12,
    "fix": Object {
      "range": Array [
        255,
        256,
      ],
      "text": "",
    },
    "line": 12,
    "message": "Do not use trailing space between \`console.error\` parameters.",
    "messageId": "no-console-spaces",
    "nodeType": null,
    "ruleId": "unicorn/no-console-spaces",
    "severity": 2,
  },
]
`;

exports[`unicorn rules unicorn/no-for-loop fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 1,
    "endColumn": 51,
    "endLine": 4,
    "fix": Object {
      "range": Array [
        76,
        156,
      ],
      "text": "const [index, element] of array.entries()) {
",
    },
    "line": 4,
    "message": "Use a \`for-of\` loop instead of this \`for\` loop.",
    "messageId": "no-for-loop",
    "nodeType": null,
    "ruleId": "unicorn/no-for-loop",
    "severity": 2,
  },
]
`;

exports[`unicorn rules unicorn/no-hex-escape fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 26,
    "endColumn": 32,
    "endLine": 1,
    "fix": Object {
      "range": Array [
        25,
        31,
      ],
      "text": "'\\\\u001B'",
    },
    "line": 1,
    "message": "Use Unicode escapes instead of hexadecimal escapes.",
    "messageId": "no-hex-escape",
    "nodeType": "Literal",
    "ruleId": "unicorn/no-hex-escape",
    "severity": 2,
  },
  Object {
    "column": 26,
    "endColumn": 33,
    "endLine": 2,
    "fix": Object {
      "range": Array [
        59,
        63,
      ],
      "text": "\\\\u001B",
    },
    "line": 2,
    "message": "Use Unicode escapes instead of hexadecimal escapes.",
    "messageId": "no-hex-escape",
    "nodeType": "TemplateElement",
    "ruleId": "unicorn/no-hex-escape",
    "severity": 2,
  },
  Object {
    "column": 33,
    "endColumn": 36,
    "endLine": 2,
    "line": 2,
    "message": "Invalid type \\"() => void\\" of template literal expression.",
    "messageId": "invalidType",
    "nodeType": "Identifier",
    "ruleId": "@typescript-eslint/restrict-template-expressions",
    "severity": 2,
  },
]
`;

exports[`unicorn rules unicorn/no-instanceof-array fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 1,
    "endColumn": 20,
    "endLine": 4,
    "fix": Object {
      "range": Array [
        120,
        139,
      ],
      "text": "Array.isArray([])",
    },
    "line": 4,
    "message": "Use \`Array.isArray()\` instead of \`instanceof Array\`.",
    "messageId": "no-instanceof-array",
    "nodeType": "BinaryExpression",
    "ruleId": "unicorn/no-instanceof-array",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 27,
    "endLine": 5,
    "fix": Object {
      "range": Array [
        141,
        167,
      ],
      "text": "Array.isArray([1, 2, 3])",
    },
    "line": 5,
    "message": "Use \`Array.isArray()\` instead of \`instanceof Array\`.",
    "messageId": "no-instanceof-array",
    "nodeType": "BinaryExpression",
    "ruleId": "unicorn/no-instanceof-array",
    "severity": 2,
  },
]
`;

exports[`unicorn rules unicorn/no-lonely-if fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 3,
    "endColumn": 4,
    "endLine": 8,
    "fix": Object {
      "range": Array [
        144,
        197,
      ],
      "text": "(true && true) {
    console.log('true');
  }",
    },
    "line": 6,
    "message": "Unexpected \`if\` as the only statement in a \`if\` block without \`else\`.",
    "messageId": "no-lonely-if",
    "nodeType": "IfStatement",
    "ruleId": "unicorn/no-lonely-if",
    "severity": 2,
  },
]
`;

exports[`unicorn rules unicorn/no-new-array fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 24,
    "endColumn": 36,
    "endLine": 1,
    "fix": Object {
      "range": Array [
        23,
        35,
      ],
      "text": "Array.from({length: 0})",
    },
    "line": 1,
    "message": "Do not use \`new Array()\`.",
    "messageId": "error",
    "nodeType": "NewExpression",
    "ruleId": "unicorn/no-new-array",
    "severity": 2,
  },
]
`;

exports[`unicorn rules unicorn/no-new-buffer fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 20,
    "endColumn": 34,
    "endLine": 3,
    "fix": Object {
      "range": Array [
        77,
        87,
      ],
      "text": "Buffer.alloc",
    },
    "line": 3,
    "message": "\`new Buffer()\` is deprecated, use \`Buffer.alloc()\` instead.",
    "messageId": "error",
    "nodeType": "NewExpression",
    "ruleId": "unicorn/no-new-buffer",
    "severity": 2,
  },
]
`;

exports[`unicorn rules unicorn/no-unsafe-regex fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 20,
    "endColumn": 39,
    "endLine": 1,
    "line": 1,
    "message": "Capture group '(a?)' should be converted to a named or non-capturing group.",
    "messageId": "required",
    "nodeType": "Literal",
    "ruleId": "prefer-named-capture-group",
    "severity": 2,
  },
  Object {
    "column": 20,
    "endColumn": 39,
    "endLine": 1,
    "line": 1,
    "message": "Capture group '(a)' should be converted to a named or non-capturing group.",
    "messageId": "required",
    "nodeType": "Literal",
    "ruleId": "prefer-named-capture-group",
    "severity": 2,
  },
  Object {
    "column": 20,
    "endColumn": 39,
    "endLine": 1,
    "line": 1,
    "message": "Unsafe regular expression.",
    "messageId": "no-unsafe-regex",
    "nodeType": "Literal",
    "ruleId": "unicorn/no-unsafe-regex",
    "severity": 2,
  },
  Object {
    "column": 20,
    "endColumn": 39,
    "endLine": 1,
    "line": 1,
    "message": "Use the 'u' flag.",
    "messageId": "requireUFlag",
    "nodeType": "Literal",
    "ruleId": "require-unicode-regexp",
    "severity": 2,
  },
  Object {
    "column": 20,
    "endColumn": 70,
    "endLine": 2,
    "line": 2,
    "message": "Use the 'u' flag.",
    "messageId": "requireUFlag",
    "nodeType": "CallExpression",
    "ruleId": "require-unicode-regexp",
    "severity": 2,
  },
  Object {
    "column": 20,
    "endColumn": 70,
    "endLine": 2,
    "fix": Object {
      "range": Array [
        59,
        59,
      ],
      "text": "new ",
    },
    "line": 2,
    "message": "Use \`new RegExp()\` instead of \`RegExp()\`.",
    "messageId": "enforce",
    "nodeType": "CallExpression",
    "ruleId": "unicorn/new-for-builtins",
    "severity": 2,
  },
  Object {
    "column": 27,
    "endColumn": 36,
    "endLine": 2,
    "fix": Object {
      "range": Array [
        66,
        66,
      ],
      "text": "new ",
    },
    "line": 2,
    "message": "Use \`new Array()\` instead of \`Array()\`.",
    "messageId": "enforce",
    "nodeType": "CallExpression",
    "ruleId": "unicorn/new-for-builtins",
    "severity": 2,
  },
  Object {
    "column": 33,
    "endColumn": 35,
    "endLine": 2,
    "line": 2,
    "message": "No magic number: 27.",
    "messageId": "noMagic",
    "nodeType": "Literal",
    "ruleId": "@typescript-eslint/no-magic-numbers",
    "severity": 2,
  },
  Object {
    "column": 50,
    "endColumn": 59,
    "endLine": 2,
    "fix": Object {
      "range": Array [
        89,
        89,
      ],
      "text": "new ",
    },
    "line": 2,
    "message": "Use \`new Array()\` instead of \`Array()\`.",
    "messageId": "enforce",
    "nodeType": "CallExpression",
    "ruleId": "unicorn/new-for-builtins",
    "severity": 2,
  },
  Object {
    "column": 56,
    "endColumn": 58,
    "endLine": 2,
    "line": 2,
    "message": "No magic number: 27.",
    "messageId": "noMagic",
    "nodeType": "Literal",
    "ruleId": "@typescript-eslint/no-magic-numbers",
    "severity": 2,
  },
  Object {
    "column": 20,
    "endColumn": 30,
    "endLine": 3,
    "line": 3,
    "message": "Capture group '(x+x+)' should be converted to a named or non-capturing group.",
    "messageId": "required",
    "nodeType": "Literal",
    "ruleId": "prefer-named-capture-group",
    "severity": 2,
  },
  Object {
    "column": 20,
    "endColumn": 30,
    "endLine": 3,
    "line": 3,
    "message": "Unsafe regular expression.",
    "messageId": "no-unsafe-regex",
    "nodeType": "Literal",
    "ruleId": "unicorn/no-unsafe-regex",
    "severity": 2,
  },
  Object {
    "column": 20,
    "endColumn": 30,
    "endLine": 3,
    "line": 3,
    "message": "Use the 'u' flag.",
    "messageId": "requireUFlag",
    "nodeType": "Literal",
    "ruleId": "require-unicode-regexp",
    "severity": 2,
  },
  Object {
    "column": 20,
    "endColumn": 34,
    "endLine": 4,
    "line": 4,
    "message": "Capture group '(x+x+)' should be converted to a named or non-capturing group.",
    "messageId": "required",
    "nodeType": "Literal",
    "ruleId": "prefer-named-capture-group",
    "severity": 2,
  },
  Object {
    "column": 20,
    "endColumn": 34,
    "endLine": 4,
    "line": 4,
    "message": "Unsafe regular expression.",
    "messageId": "no-unsafe-regex",
    "nodeType": "Literal",
    "ruleId": "unicorn/no-unsafe-regex",
    "severity": 2,
  },
  Object {
    "column": 20,
    "endColumn": 34,
    "endLine": 4,
    "line": 4,
    "message": "Use the 'u' flag.",
    "messageId": "requireUFlag",
    "nodeType": "Literal",
    "ruleId": "require-unicode-regexp",
    "severity": 2,
  },
  Object {
    "column": 20,
    "endColumn": 31,
    "endLine": 5,
    "line": 5,
    "message": "Capture group '(a+)' should be converted to a named or non-capturing group.",
    "messageId": "required",
    "nodeType": "Literal",
    "ruleId": "prefer-named-capture-group",
    "severity": 2,
  },
  Object {
    "column": 20,
    "endColumn": 31,
    "endLine": 5,
    "line": 5,
    "message": "Unsafe regular expression.",
    "messageId": "no-unsafe-regex",
    "nodeType": "Literal",
    "ruleId": "unicorn/no-unsafe-regex",
    "severity": 2,
  },
  Object {
    "column": 20,
    "endColumn": 31,
    "endLine": 5,
    "line": 5,
    "message": "Use the 'u' flag.",
    "messageId": "requireUFlag",
    "nodeType": "Literal",
    "ruleId": "require-unicode-regexp",
    "severity": 2,
  },
  Object {
    "column": 20,
    "endColumn": 30,
    "endLine": 6,
    "line": 6,
    "message": "Capture group '(a+)' should be converted to a named or non-capturing group.",
    "messageId": "required",
    "nodeType": "Literal",
    "ruleId": "prefer-named-capture-group",
    "severity": 2,
  },
  Object {
    "column": 20,
    "endColumn": 30,
    "endLine": 6,
    "line": 6,
    "message": "Unsafe regular expression.",
    "messageId": "no-unsafe-regex",
    "nodeType": "Literal",
    "ruleId": "unicorn/no-unsafe-regex",
    "severity": 2,
  },
  Object {
    "column": 20,
    "endColumn": 30,
    "endLine": 6,
    "line": 6,
    "message": "Use the 'u' flag.",
    "messageId": "requireUFlag",
    "nodeType": "Literal",
    "ruleId": "require-unicode-regexp",
    "severity": 2,
  },
  Object {
    "column": 20,
    "endColumn": 39,
    "endLine": 7,
    "line": 7,
    "message": "Capture group '(.*)' should be converted to a named or non-capturing group.",
    "messageId": "required",
    "nodeType": "Literal",
    "ruleId": "prefer-named-capture-group",
    "severity": 2,
  },
  Object {
    "column": 20,
    "endColumn": 39,
    "endLine": 7,
    "line": 7,
    "message": "Unsafe regular expression.",
    "messageId": "no-unsafe-regex",
    "nodeType": "Literal",
    "ruleId": "unicorn/no-unsafe-regex",
    "severity": 2,
  },
  Object {
    "column": 20,
    "endColumn": 39,
    "endLine": 7,
    "line": 7,
    "message": "Use the 'u' flag.",
    "messageId": "requireUFlag",
    "nodeType": "Literal",
    "ruleId": "require-unicode-regexp",
    "severity": 2,
  },
]
`;

exports[`unicorn rules unicorn/no-zero-fractions fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 21,
    "endColumn": 24,
    "endLine": 1,
    "fix": Object {
      "range": Array [
        20,
        23,
      ],
      "text": "1",
    },
    "line": 1,
    "message": "Don't use a zero fraction in the number.",
    "messageId": "zero-fraction",
    "nodeType": "Literal",
    "ruleId": "unicorn/no-zero-fractions",
    "severity": 2,
  },
  Object {
    "column": 22,
    "endColumn": 25,
    "endLine": 2,
    "fix": Object {
      "range": Array [
        46,
        49,
      ],
      "text": "1",
    },
    "line": 2,
    "message": "Don't use a zero fraction in the number.",
    "messageId": "zero-fraction",
    "nodeType": "Literal",
    "ruleId": "unicorn/no-zero-fractions",
    "severity": 2,
  },
  Object {
    "column": 21,
    "endColumn": 29,
    "endLine": 6,
    "fix": Object {
      "range": Array [
        158,
        166,
      ],
      "text": "123e20",
    },
    "line": 6,
    "message": "Don't use a zero fraction in the number.",
    "messageId": "zero-fraction",
    "nodeType": "Literal",
    "ruleId": "unicorn/no-zero-fractions",
    "severity": 2,
  },
]
`;

exports[`unicorn rules unicorn/numeric-separators-style fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 36,
    "endColumn": 45,
    "endLine": 1,
    "fix": Object {
      "range": Array [
        35,
        44,
      ],
      "text": "1_234_444",
    },
    "line": 1,
    "message": "Invalid group length in numeric value.",
    "messageId": "numeric-separators-style",
    "nodeType": "Literal",
    "ruleId": "unicorn/numeric-separators-style",
    "severity": 2,
  },
]
`;

exports[`unicorn rules unicorn/prefer-add-event-listener fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 1,
    "endColumn": 28,
    "endLine": 1,
    "line": 1,
    "message": "No object mutation allowed.",
    "nodeType": "AssignmentExpression",
    "ruleId": "immutable/no-mutation",
    "severity": 2,
  },
  Object {
    "column": 10,
    "endColumn": 17,
    "endLine": 1,
    "fix": Object {
      "range": Array [
        0,
        27,
      ],
      "text": "someFail.addEventListener('click', () => {})",
    },
    "line": 1,
    "message": "Prefer \`addEventListener\` over \`onclick\`.",
    "messageId": "prefer-add-event-listener",
    "nodeType": "Identifier",
    "ruleId": "unicorn/prefer-add-event-listener",
    "severity": 2,
  },
  Object {
    "column": 20,
    "endColumn": 25,
    "endLine": 1,
    "line": 1,
    "message": "Missing return type on function.",
    "messageId": "missingReturnType",
    "nodeType": "ArrowFunctionExpression",
    "ruleId": "@typescript-eslint/explicit-function-return-type",
    "severity": 2,
  },
]
`;

exports[`unicorn rules unicorn/prefer-array-find fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 7,
    "endColumn": 13,
    "endLine": 5,
    "fix": Object {
      "range": Array [
        170,
        198,
      ],
      "text": "find((x) => x === '🦄')",
    },
    "line": 5,
    "message": "Prefer \`.find(…)\` over \`.filter(…)[0]\`.",
    "messageId": "error-zero-index",
    "nodeType": "Identifier",
    "ruleId": "unicorn/prefer-array-find",
    "severity": 2,
  },
]
`;

exports[`unicorn rules unicorn/prefer-array-flat-map fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 1,
    "endColumn": 38,
    "endLine": 6,
    "fix": Object {
      "range": Array [
        165,
        188,
      ],
      "text": "flatMap((el) => el);",
    },
    "line": 6,
    "message": "Prefer \`.flatMap(…)\` over \`.map(…).flat()\`.",
    "messageId": "flat-map",
    "nodeType": "CallExpression",
    "ruleId": "unicorn/prefer-array-flat-map",
    "severity": 2,
  },
]
`;

exports[`unicorn rules unicorn/prefer-array-index-of fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 7,
    "endColumn": 16,
    "endLine": 4,
    "fix": Object {
      "range": Array [
        108,
        135,
      ],
      "text": "indexOf('🦄'",
    },
    "line": 4,
    "message": "Use \`.indexOf()\` instead of \`.findIndex()\` when looking for the index of an item.",
    "messageId": "prefer-indexOf-over-findIndex//error",
    "nodeType": "Identifier",
    "ruleId": "unicorn/prefer-array-index-of",
    "severity": 2,
  },
]
`;

exports[`unicorn rules unicorn/prefer-array-some fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 11,
    "endColumn": 15,
    "endLine": 4,
    "line": 4,
    "message": "Prefer \`.some(…)\` over \`.find(…)\`.",
    "messageId": "error",
    "nodeType": "Identifier",
    "ruleId": "unicorn/prefer-array-some",
    "severity": 2,
    "suggestions": Array [
      Object {
        "desc": "Replace \`.find(…)\` with \`.some(…)\`.",
        "fix": Object {
          "range": Array [
            148,
            152,
          ],
          "text": "some",
        },
        "messageId": "suggestion",
      },
    ],
  },
]
`;

exports[`unicorn rules unicorn/prefer-date-now fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 12,
    "endColumn": 19,
    "endLine": 1,
    "fix": Object {
      "range": Array [
        0,
        20,
      ],
      "text": "Date.now()",
    },
    "line": 1,
    "message": "Prefer \`Date.now()\` over \`Date#getTime()\`.",
    "messageId": "prefer-date-now-over-methods",
    "nodeType": "Identifier",
    "ruleId": "unicorn/prefer-date-now",
    "severity": 2,
  },
]
`;

exports[`unicorn rules unicorn/prefer-default-parameters fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 3,
    "endColumn": 28,
    "endLine": 2,
    "line": 2,
    "message": "Prefer default parameters over reassignment.",
    "messageId": "preferDefaultParameters",
    "nodeType": "VariableDeclaration",
    "ruleId": "unicorn/prefer-default-parameters",
    "severity": 2,
    "suggestions": Array [
      Object {
        "desc": "Replace reassignment with default parameter.",
        "fix": Object {
          "range": Array [
            37,
            103,
          ],
          "text": "bar = 'bar'): string => {
",
        },
        "messageId": "preferDefaultParametersSuggest",
      },
    ],
  },
]
`;

exports[`unicorn rules unicorn/prefer-includes fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 4,
    "endColumn": 11,
    "endLine": 4,
    "fix": Object {
      "range": Array [
        119,
        143,
      ],
      "text": "[].includes('foo')",
    },
    "line": 4,
    "message": "Use \`.includes()\`, rather than \`.indexOf()\`, when checking for existence.",
    "messageId": "prefer-includes",
    "nodeType": "Identifier",
    "ruleId": "unicorn/prefer-includes",
    "severity": 2,
  },
  Object {
    "column": 3,
    "endColumn": 10,
    "endLine": 5,
    "fix": Object {
      "range": Array [
        145,
        167,
      ],
      "text": "x.includes('foo')",
    },
    "line": 5,
    "message": "Use \`.includes()\`, rather than \`.indexOf()\`, when checking for existence.",
    "messageId": "prefer-includes",
    "nodeType": "Identifier",
    "ruleId": "unicorn/prefer-includes",
    "severity": 2,
  },
  Object {
    "column": 18,
    "endColumn": 20,
    "endLine": 5,
    "line": 5,
    "message": "Expected '!==' and instead saw '!='.",
    "messageId": "unexpected",
    "nodeType": "BinaryExpression",
    "ruleId": "eqeqeq",
    "severity": 2,
  },
  Object {
    "column": 5,
    "endColumn": 12,
    "endLine": 6,
    "fix": Object {
      "range": Array [
        169,
        192,
      ],
      "text": "str.includes('foo')",
    },
    "line": 6,
    "message": "Use \`.includes()\`, rather than \`.indexOf()\`, when checking for existence.",
    "messageId": "prefer-includes",
    "nodeType": "Identifier",
    "ruleId": "unicorn/prefer-includes",
    "severity": 2,
  },
  Object {
    "column": 10,
    "endColumn": 17,
    "endLine": 7,
    "fix": Object {
      "range": Array [
        194,
        222,
      ],
      "text": "'foobar'.includes('foo')",
    },
    "line": 7,
    "message": "Use \`.includes()\`, rather than \`.indexOf()\`, when checking for existence.",
    "messageId": "prefer-includes",
    "nodeType": "Identifier",
    "ruleId": "unicorn/prefer-includes",
    "severity": 2,
  },
  Object {
    "column": 3,
    "endColumn": 10,
    "endLine": 8,
    "fix": Object {
      "range": Array [
        224,
        247,
      ],
      "text": "!x.includes('foo')",
    },
    "line": 8,
    "message": "Use \`.includes()\`, rather than \`.indexOf()\`, when checking for existence.",
    "messageId": "prefer-includes",
    "nodeType": "Identifier",
    "ruleId": "unicorn/prefer-includes",
    "severity": 2,
  },
]
`;

exports[`unicorn rules unicorn/prefer-keyboard-event-key fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 21,
    "endColumn": 28,
    "endLine": 5,
    "line": 5,
    "message": "Use \`.key\` instead of \`.keyCode\`.",
    "messageId": "prefer-keyboard-event-key",
    "nodeType": "Identifier",
    "ruleId": "unicorn/prefer-keyboard-event-key",
    "severity": 2,
  },
]
`;

exports[`unicorn rules unicorn/prefer-math-trunc fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 13,
    "endColumn": 21,
    "endLine": 5,
    "line": 5,
    "message": "Use \`Math.trunc\` instead of \`| 0\`.",
    "messageId": "error-bitwise",
    "nodeType": "BinaryExpression",
    "ruleId": "unicorn/prefer-math-trunc",
    "severity": 2,
    "suggestions": Array [
      Object {
        "data": Object {
          "operator": "|",
          "value": "0",
        },
        "desc": "Replace \`| 0\` with \`Math.trunc\`.",
        "fix": Object {
          "range": Array [
            134,
            142,
          ],
          "text": "Math.trunc(37.4)",
        },
        "messageId": "suggestion-bitwise",
      },
    ],
  },
]
`;

exports[`unicorn rules unicorn/prefer-negative-index fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 1,
    "endColumn": 2,
    "endLine": 7,
    "fix": Object {
      "range": Array [
        115,
        172,
      ],
      "text": "- 2,
  ",
    },
    "line": 4,
    "message": "Prefer negative index over length minus index for \`slice\`.",
    "messageId": "prefer-negative-index",
    "nodeType": "CallExpression",
    "ruleId": "unicorn/prefer-negative-index",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 58,
    "endLine": 8,
    "fix": Object {
      "range": Array [
        205,
        230,
      ],
      "text": "",
    },
    "line": 8,
    "message": "Prefer negative index over length minus index for \`splice\`.",
    "messageId": "prefer-negative-index",
    "nodeType": "CallExpression",
    "ruleId": "unicorn/prefer-negative-index",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 2,
    "endLine": 13,
    "fix": Object {
      "range": Array [
        290,
        347,
      ],
      "text": "- 2,
  ",
    },
    "line": 9,
    "message": "Prefer negative index over length minus index for \`slice\`.",
    "messageId": "prefer-negative-index",
    "nodeType": "CallExpression",
    "ruleId": "unicorn/prefer-negative-index",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 3,
    "endLine": 17,
    "fix": Object {
      "range": Array [
        406,
        463,
      ],
      "text": "- 2,
  ",
    },
    "line": 14,
    "message": "Prefer negative index over length minus index for \`slice\`.",
    "messageId": "prefer-negative-index",
    "nodeType": "CallExpression",
    "ruleId": "unicorn/prefer-negative-index",
    "severity": 2,
  },
]
`;

exports[`unicorn rules unicorn/prefer-number-properties fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 1,
    "endColumn": 9,
    "endLine": 3,
    "fix": Object {
      "range": Array [
        46,
        54,
      ],
      "text": "Number.parseInt",
    },
    "line": 3,
    "message": "Prefer \`Number.parseInt()\` over \`parseInt()\`.",
    "messageId": "method-error",
    "nodeType": "Identifier",
    "ruleId": "unicorn/prefer-number-properties",
    "severity": 2,
  },
]
`;

exports[`unicorn rules unicorn/prefer-query-selector fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 32,
    "endColumn": 38,
    "endLine": 7,
    "line": 7,
    "message": "Unexpected use of '<<'.",
    "messageId": "unexpected",
    "nodeType": "BinaryExpression",
    "ruleId": "no-bitwise",
    "severity": 2,
  },
]
`;

exports[`unicorn rules unicorn/prefer-reflect-apply fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 1,
    "endColumn": 41,
    "endLine": 7,
    "fix": Object {
      "range": Array [
        178,
        218,
      ],
      "text": "Reflect.apply(preferReflectApplyFail, null, [42])",
    },
    "line": 7,
    "message": "Prefer \`Reflect.apply()\` over \`Function#apply()\`.",
    "messageId": "prefer-reflect-apply",
    "nodeType": "CallExpression",
    "ruleId": "unicorn/prefer-reflect-apply",
    "severity": 2,
  },
  Object {
    "column": 37,
    "endColumn": 39,
    "endLine": 7,
    "line": 7,
    "message": "No magic number: 42.",
    "messageId": "noMagic",
    "nodeType": "Literal",
    "ruleId": "@typescript-eslint/no-magic-numbers",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 66,
    "endLine": 8,
    "fix": Object {
      "range": Array [
        220,
        285,
      ],
      "text": "Reflect.apply(preferReflectApplyFail, null, [42])",
    },
    "line": 8,
    "message": "Prefer \`Reflect.apply()\` over \`Function#apply()\`.",
    "messageId": "prefer-reflect-apply",
    "nodeType": "CallExpression",
    "ruleId": "unicorn/prefer-reflect-apply",
    "severity": 2,
  },
  Object {
    "column": 62,
    "endColumn": 64,
    "endLine": 8,
    "line": 8,
    "message": "No magic number: 42.",
    "messageId": "noMagic",
    "nodeType": "Literal",
    "ruleId": "@typescript-eslint/no-magic-numbers",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 41,
    "endLine": 9,
    "fix": Object {
      "range": Array [
        287,
        327,
      ],
      "text": "Reflect.apply(preferReflectApplyFail, this, [42])",
    },
    "line": 9,
    "message": "Prefer \`Reflect.apply()\` over \`Function#apply()\`.",
    "messageId": "prefer-reflect-apply",
    "nodeType": "CallExpression",
    "ruleId": "unicorn/prefer-reflect-apply",
    "severity": 2,
  },
  Object {
    "column": 30,
    "endColumn": 34,
    "endLine": 9,
    "line": 9,
    "message": "Unexpected this, use functions not classes.",
    "nodeType": "ThisExpression",
    "ruleId": "immutable/no-this",
    "severity": 2,
  },
  Object {
    "column": 30,
    "endColumn": 34,
    "endLine": 9,
    "line": 9,
    "message": "Unexpected 'this'.",
    "messageId": "unexpectedThis",
    "nodeType": "ThisExpression",
    "ruleId": "@typescript-eslint/no-invalid-this",
    "severity": 2,
  },
  Object {
    "column": 37,
    "endColumn": 39,
    "endLine": 9,
    "line": 9,
    "message": "No magic number: 42.",
    "messageId": "noMagic",
    "nodeType": "Literal",
    "ruleId": "@typescript-eslint/no-magic-numbers",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 66,
    "endLine": 10,
    "fix": Object {
      "range": Array [
        329,
        394,
      ],
      "text": "Reflect.apply(preferReflectApplyFail, this, [42])",
    },
    "line": 10,
    "message": "Prefer \`Reflect.apply()\` over \`Function#apply()\`.",
    "messageId": "prefer-reflect-apply",
    "nodeType": "CallExpression",
    "ruleId": "unicorn/prefer-reflect-apply",
    "severity": 2,
  },
  Object {
    "column": 55,
    "endColumn": 59,
    "endLine": 10,
    "line": 10,
    "message": "Unexpected this, use functions not classes.",
    "nodeType": "ThisExpression",
    "ruleId": "immutable/no-this",
    "severity": 2,
  },
  Object {
    "column": 55,
    "endColumn": 59,
    "endLine": 10,
    "line": 10,
    "message": "Unexpected 'this'.",
    "messageId": "unexpectedThis",
    "nodeType": "ThisExpression",
    "ruleId": "@typescript-eslint/no-invalid-this",
    "severity": 2,
  },
  Object {
    "column": 62,
    "endColumn": 64,
    "endLine": 10,
    "line": 10,
    "message": "No magic number: 42.",
    "messageId": "noMagic",
    "nodeType": "Literal",
    "ruleId": "@typescript-eslint/no-magic-numbers",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 46,
    "endLine": 11,
    "fix": Object {
      "range": Array [
        396,
        441,
      ],
      "text": "Reflect.apply(preferReflectApplyFail, null, arguments)",
    },
    "line": 11,
    "message": "Prefer \`Reflect.apply()\` over \`Function#apply()\`.",
    "messageId": "prefer-reflect-apply",
    "nodeType": "CallExpression",
    "ruleId": "unicorn/prefer-reflect-apply",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 71,
    "endLine": 12,
    "fix": Object {
      "range": Array [
        443,
        513,
      ],
      "text": "Reflect.apply(preferReflectApplyFail, null, arguments)",
    },
    "line": 12,
    "message": "Prefer \`Reflect.apply()\` over \`Function#apply()\`.",
    "messageId": "prefer-reflect-apply",
    "nodeType": "CallExpression",
    "ruleId": "unicorn/prefer-reflect-apply",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 46,
    "endLine": 13,
    "fix": Object {
      "range": Array [
        515,
        560,
      ],
      "text": "Reflect.apply(preferReflectApplyFail, this, arguments)",
    },
    "line": 13,
    "message": "Prefer \`Reflect.apply()\` over \`Function#apply()\`.",
    "messageId": "prefer-reflect-apply",
    "nodeType": "CallExpression",
    "ruleId": "unicorn/prefer-reflect-apply",
    "severity": 2,
  },
  Object {
    "column": 30,
    "endColumn": 34,
    "endLine": 13,
    "line": 13,
    "message": "Unexpected this, use functions not classes.",
    "nodeType": "ThisExpression",
    "ruleId": "immutable/no-this",
    "severity": 2,
  },
  Object {
    "column": 30,
    "endColumn": 34,
    "endLine": 13,
    "line": 13,
    "message": "Unexpected 'this'.",
    "messageId": "unexpectedThis",
    "nodeType": "ThisExpression",
    "ruleId": "@typescript-eslint/no-invalid-this",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 71,
    "endLine": 14,
    "fix": Object {
      "range": Array [
        562,
        632,
      ],
      "text": "Reflect.apply(preferReflectApplyFail, this, arguments)",
    },
    "line": 14,
    "message": "Prefer \`Reflect.apply()\` over \`Function#apply()\`.",
    "messageId": "prefer-reflect-apply",
    "nodeType": "CallExpression",
    "ruleId": "unicorn/prefer-reflect-apply",
    "severity": 2,
  },
  Object {
    "column": 55,
    "endColumn": 59,
    "endLine": 14,
    "line": 14,
    "message": "Unexpected this, use functions not classes.",
    "nodeType": "ThisExpression",
    "ruleId": "immutable/no-this",
    "severity": 2,
  },
  Object {
    "column": 55,
    "endColumn": 59,
    "endLine": 14,
    "line": 14,
    "message": "Unexpected 'this'.",
    "messageId": "unexpectedThis",
    "nodeType": "ThisExpression",
    "ruleId": "@typescript-eslint/no-invalid-this",
    "severity": 2,
  },
]
`;

exports[`unicorn rules unicorn/prefer-set-has fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 7,
    "endColumn": 23,
    "endLine": 1,
    "fix": Object {
      "range": Array [
        25,
        110,
      ],
      "text": "new Set([1]);
const preferSetHasFailFunction = (value): boolean =>
  preferSetHasFail.has",
    },
    "line": 1,
    "message": "\`preferSetHasFail\` should be a \`Set\`, and use \`preferSetHasFail.has()\` to check existence or non-existence.",
    "messageId": "preferSetHas",
    "nodeType": "Identifier",
    "ruleId": "unicorn/prefer-set-has",
    "severity": 2,
  },
]
`;

exports[`unicorn rules unicorn/prefer-string-replace-all fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 1,
    "endColumn": 55,
    "endLine": 1,
    "fix": Object {
      "range": Array [
        11,
        49,
      ],
      "text": "All('This has no special regex symbols'",
    },
    "line": 1,
    "message": "Prefer \`String#replaceAll()\` over \`String#replace()\`.",
    "messageId": "prefer-string-replace-all",
    "nodeType": "CallExpression",
    "ruleId": "unicorn/prefer-string-replace-all",
    "severity": 2,
  },
]
`;

exports[`unicorn rules unicorn/prefer-string-slice fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 1,
    "endColumn": 19,
    "endLine": 3,
    "fix": Object {
      "range": Array [
        58,
        76,
      ],
      "text": "'foo'.slice(1, 3)",
    },
    "line": 3,
    "message": "Prefer \`String#slice()\` over \`String#substr()\`.",
    "messageId": "substr",
    "nodeType": "CallExpression",
    "ruleId": "unicorn/prefer-string-slice",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 22,
    "endLine": 4,
    "fix": Object {
      "range": Array [
        78,
        99,
      ],
      "text": "'foo'.slice(1, 3)",
    },
    "line": 4,
    "message": "Prefer \`String#slice()\` over \`String#substring()\`.",
    "messageId": "substring",
    "nodeType": "CallExpression",
    "ruleId": "unicorn/prefer-string-slice",
    "severity": 2,
  },
]
`;

exports[`unicorn rules unicorn/prefer-string-starts-ends-with fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 1,
    "endColumn": 19,
    "endLine": 4,
    "fix": Object {
      "range": Array [
        116,
        133,
      ],
      "text": "'foo'.startsWith('bar'",
    },
    "line": 4,
    "message": "Prefer \`String#startsWith()\` over a regex with \`^\`.",
    "messageId": "prefer-starts-with",
    "nodeType": "CallExpression",
    "ruleId": "unicorn/prefer-string-starts-ends-with",
    "severity": 2,
  },
  Object {
    "column": 1,
    "endColumn": 19,
    "endLine": 5,
    "fix": Object {
      "range": Array [
        136,
        153,
      ],
      "text": "'foo'.endsWith('bar'",
    },
    "line": 5,
    "message": "Prefer \`String#endsWith()\` over a regex with \`$\`.",
    "messageId": "prefer-ends-with",
    "nodeType": "CallExpression",
    "ruleId": "unicorn/prefer-string-starts-ends-with",
    "severity": 2,
  },
]
`;

exports[`unicorn rules unicorn/prefer-string-trim-start-end fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 7,
    "endColumn": 15,
    "endLine": 1,
    "fix": Object {
      "range": Array [
        6,
        14,
      ],
      "text": "trimStart",
    },
    "line": 1,
    "message": "Prefer \`String#trimStart()\` over \`String#trimLeft()\`.",
    "messageId": "trimLeft",
    "nodeType": "Identifier",
    "ruleId": "unicorn/prefer-string-trim-start-end",
    "severity": 2,
  },
  Object {
    "column": 7,
    "endColumn": 16,
    "endLine": 2,
    "fix": Object {
      "range": Array [
        24,
        33,
      ],
      "text": "trimEnd",
    },
    "line": 2,
    "message": "Prefer \`String#trimEnd()\` over \`String#trimRight()\`.",
    "messageId": "trimRight",
    "nodeType": "Identifier",
    "ruleId": "unicorn/prefer-string-trim-start-end",
    "severity": 2,
  },
]
`;

exports[`unicorn rules unicorn/prefer-ternary fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 3,
    "endColumn": 4,
    "endLine": 11,
    "fix": Object {
      "range": Array [
        289,
        344,
      ],
      "text": "yield ('a' ? 'a' : 'b');",
    },
    "line": 7,
    "message": "This \`if\` statement can be replaced by a ternary expression.",
    "messageId": "prefer-ternary",
    "nodeType": "IfStatement",
    "ruleId": "unicorn/prefer-ternary",
    "severity": 2,
  },
]
`;

exports[`unicorn rules unicorn/prevent-abbreviations fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 7,
    "endColumn": 8,
    "endLine": 3,
    "line": 3,
    "message": "Please rename the variable \`e\`. Suggested names are: \`error\`, \`event\`. A more descriptive name will do too.",
    "nodeType": "Identifier",
    "ruleId": "unicorn/prevent-abbreviations",
    "severity": 2,
  },
]
`;

exports[`unicorn rules unicorn/throw-new-error fails on an invalid fixture 1`] = `
Array [
  Object {
    "column": 7,
    "endColumn": 23,
    "endLine": 5,
    "fix": Object {
      "range": Array [
        135,
        135,
      ],
      "text": "new ",
    },
    "line": 5,
    "message": "Use \`new\` when throwing an error.",
    "messageId": "throw-new-error",
    "nodeType": "CallExpression",
    "ruleId": "unicorn/throw-new-error",
    "severity": 2,
  },
  Object {
    "column": 7,
    "endColumn": 27,
    "endLine": 6,
    "fix": Object {
      "range": Array [
        159,
        159,
      ],
      "text": "new ",
    },
    "line": 6,
    "message": "Use \`new\` when throwing an error.",
    "messageId": "throw-new-error",
    "nodeType": "CallExpression",
    "ruleId": "unicorn/throw-new-error",
    "severity": 2,
  },
]
`;
